
MotionSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001398  0000142c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001398  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800110  00800110  0000143c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ca  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2e  00000000  00000000  00002792  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4c  00000000  00000000  000031c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00003c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  00003fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000afd  00000000  00000000  000045a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000050a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 01 	jmp	0x26a	; 0x26a <__ctors_end>
       4:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
       8:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
       c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      10:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      14:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      18:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      1c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      20:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      24:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      28:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_10>
      2c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_11>
      30:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_12>
      34:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_13>
      38:	0c 94 2b 02 	jmp	0x456	; 0x456 <__vector_14>
      3c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      40:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      44:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      48:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__vector_18>
      4c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__vector_19>
      50:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      54:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      58:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      5c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      60:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      64:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	49 6e       	ori	r20, 0xE9	; 233
      6a:	76 61       	ori	r23, 0x16	; 22
      6c:	6c 69       	ori	r22, 0x9C	; 156
      6e:	64 20       	and	r6, r4
      70:	63 6f       	ori	r22, 0xF3	; 243
      72:	6d 6d       	ori	r22, 0xDD	; 221
      74:	61 6e       	ori	r22, 0xE1	; 225
      76:	64 21       	and	r22, r4
      78:	20 50       	subi	r18, 0x00	; 0
      7a:	72 65       	ori	r23, 0x52	; 82
      7c:	73 73       	andi	r23, 0x33	; 51
      7e:	20 27       	eor	r18, r16
      80:	54 27       	eor	r21, r20
      82:	20 6f       	ori	r18, 0xF0	; 240
      84:	72 20       	and	r7, r2
      86:	27 74       	andi	r18, 0x47	; 71
      88:	27 20       	and	r2, r7
      8a:	74 6f       	ori	r23, 0xF4	; 244
      8c:	20 74       	andi	r18, 0x40	; 64
      8e:	72 69       	ori	r23, 0x92	; 146
      90:	67 67       	ori	r22, 0x77	; 119
      92:	65 72       	andi	r22, 0x25	; 37
      94:	2e 0a       	sbc	r2, r30
      96:	0d 00       	.word	0x000d	; ????

00000098 <__c.2218>:
      98:	44 69 73 74 61 6e 63 65 20 69 73 20 74 6f 6f 20     Distance is too 
      a8:	63 6c 6f 73 65 20 74 6f 20 74 68 65 20 64 6f 6f     close to the doo
      b8:	72 2e 20 44 6f 6f 72 20 77 69 6c 6c 20 72 65 6d     r. Door will rem
      c8:	61 69 6e 20 63 6c 6f 73 65 64 2e 0a 0d 00           ain closed....

000000d6 <__c.2216>:
      d6:	43 61 6c 63 75 6c 61 74 65 64 20 44 69 73 74 61     Calculated Dista
      e6:	6e 63 65 3a 20 25 64 20 63 6d 0a 0d 00              nce: %d cm...

000000f3 <__c.2214>:
      f3:	44 69 73 74 61 6e 63 65 20 69 73 20 6f 76 65 72     Distance is over
     103:	20 74 68 65 20 31 30 30 63 6d 20 74 68 72 65 73      the 100cm thres
     113:	68 6f 6c 64 2e 20 44 6f 6f 72 20 77 69 6c 6c 20     hold. Door will 
     123:	72 65 6d 61 69 6e 20 63 6c 6f 73 65 64 2e 0a 0d     remain closed...
	...

00000134 <__c.2222>:
     134:	0a 0d 00                                            ...

00000137 <__c.2211>:
     137:	4e 6f 20 65 63 68 6f 20 64 65 74 65 63 74 65 64     No echo detected
     147:	21 20 43 68 65 63 6b 20 77 69 72 69 6e 67 20 6f     ! Check wiring o
     157:	72 20 73 65 6e 73 6f 72 2e 0a 0d 00                 r sensor....

00000163 <__c.2209>:
     163:	52 61 77 20 54 69 6d 65 72 20 56 61 6c 75 65 73     Raw Timer Values
     173:	3a 20 45 43 48 4f 48 69 67 68 20 3d 20 25 64 2c     : ECHOHigh = %d,
     183:	20 45 43 48 4f 4c 6f 77 20 3d 20 25 64 2c 20 4d      ECHOLow = %d, M
     193:	49 50 20 3d 20 25 64 0a 0d 00                       IP = %d...

0000019d <__c.2204>:
     19d:	54 72 69 67 67 65 72 69 6e 67 20 53 65 6e 73 6f     Triggering Senso
     1ad:	72 2e 2e 2e 0a 0d 00                                r......

000001b4 <__c.2199>:
     1b4:	0a 0d 00                                            ...

000001b7 <__c.2193>:
     1b7:	0a 53 79 73 74 65 6d 20 52 65 61 64 79 2e 20 50     .System Ready. P
     1c7:	72 65 73 73 20 27 54 27 20 6f 72 20 27 74 27 20     ress 'T' or 't' 
     1d7:	74 6f 20 74 72 69 67 67 65 72 20 73 65 6e 73 6f     to trigger senso
     1e7:	72 2e 0a 0d 00                                      r....

000001ec <__c.2191>:
     1ec:	54 65 73 74 69 6e 67 20 73 70 65 61 6b 65 72 2e     Testing speaker.
     1fc:	2e 2e 0a 0d 00                                      .....

00000201 <__c.2189>:
     201:	54 65 73 74 69 6e 67 20 72 65 64 20 4c 45 44 2e     Testing red LED.
     211:	2e 2e 0a 0d 00                                      .....

00000216 <__c.2187>:
     216:	54 65 73 74 69 6e 67 20 6f 72 61 6e 67 65 20 4c     Testing orange L
     226:	45 44 2e 2e 2e 0a 0d 00                             ED......

0000022e <__c.2185>:
     22e:	54 65 73 74 69 6e 67 20 67 72 65 65 6e 20 4c 45     Testing green LE
     23e:	44 2e 2e 2e 0a 0d 00                                D......

00000245 <__c.2183>:
     245:	49 6e 69 74 69 61 74 69 6e 67 20 73 79 73 74 65     Initiating syste
     255:	6d 2e 20 50 6c 65 61 73 65 20 77 61 69 74 2e 2e     m. Please wait..
     265:	2e 0a 0a 0d 00                                      .....

0000026a <__ctors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	d8 e0       	ldi	r29, 0x08	; 8
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61

00000276 <__do_copy_data>:
     276:	11 e0       	ldi	r17, 0x01	; 1
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	e8 e9       	ldi	r30, 0x98	; 152
     27e:	f3 e1       	ldi	r31, 0x13	; 19
     280:	02 c0       	rjmp	.+4      	; 0x286 <__do_copy_data+0x10>
     282:	05 90       	lpm	r0, Z+
     284:	0d 92       	st	X+, r0
     286:	a0 31       	cpi	r26, 0x10	; 16
     288:	b1 07       	cpc	r27, r17
     28a:	d9 f7       	brne	.-10     	; 0x282 <__do_copy_data+0xc>

0000028c <__do_clear_bss>:
     28c:	21 e0       	ldi	r18, 0x01	; 1
     28e:	a0 e1       	ldi	r26, 0x10	; 16
     290:	b1 e0       	ldi	r27, 0x01	; 1
     292:	01 c0       	rjmp	.+2      	; 0x296 <.do_clear_bss_start>

00000294 <.do_clear_bss_loop>:
     294:	1d 92       	st	X+, r1

00000296 <.do_clear_bss_start>:
     296:	a2 3a       	cpi	r26, 0xA2	; 162
     298:	b2 07       	cpc	r27, r18
     29a:	e1 f7       	brne	.-8      	; 0x294 <.do_clear_bss_loop>
     29c:	0e 94 3a 02 	call	0x474	; 0x474 <main>
     2a0:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <_exit>

000002a4 <__bad_interrupt>:
     2a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a8 <__vector_13>:
	uint16_t ocrValue = (F_CPU / (2 * frequency)) - 1;
	OCR1A = ocrValue;
}

void stopToneOutput(void) {
	TCCR1A &= ~(1 << COM1A0); // Disable toggle mode
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	0f 92       	push	r0
     2b0:	11 24       	eor	r1, r1
     2b2:	8f 93       	push	r24
     2b4:	9f 93       	push	r25
     2b6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ECHOHighPipe>
     2ba:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <ECHOHighPipe+0x1>
     2be:	02 97       	sbiw	r24, 0x02	; 2
     2c0:	38 f0       	brcs	.+14     	; 0x2d0 <__vector_13+0x28>
     2c2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     2c6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <MIP>
     2d0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ECHOHighPipe>
     2d4:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <ECHOHighPipe+0x1>
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <ECHOHighPipe+0x1>
     2de:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ECHOHighPipe>
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <__vector_10>:
     2f0:	1f 92       	push	r1
     2f2:	0f 92       	push	r0
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	0f 92       	push	r0
     2f8:	11 24       	eor	r1, r1
     2fa:	8f 93       	push	r24
     2fc:	9f 93       	push	r25
     2fe:	ef 93       	push	r30
     300:	ff 93       	push	r31
     302:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     306:	86 ff       	sbrs	r24, 6
     308:	09 c0       	rjmp	.+18     	; 0x31c <__vector_10+0x2c>
     30a:	e1 e8       	ldi	r30, 0x81	; 129
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	82 60       	ori	r24, 0x02	; 2
     312:	80 83       	st	Z, r24
     314:	80 81       	ld	r24, Z
     316:	8f 7b       	andi	r24, 0xBF	; 191
     318:	80 83       	st	Z, r24
     31a:	13 c0       	rjmp	.+38     	; 0x342 <__vector_10+0x52>
     31c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     320:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     324:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <ECHOLow+0x1>
     328:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <ECHOLow>
     32c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ECHOHighPipe>
     330:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <ECHOHighPipe+0x1>
     334:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <ECHOHigh+0x1>
     338:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <ECHOHigh>
     33c:	84 e0       	ldi	r24, 0x04	; 4
     33e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     342:	ff 91       	pop	r31
     344:	ef 91       	pop	r30
     346:	9f 91       	pop	r25
     348:	8f 91       	pop	r24
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <__vector_11>:
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	8f 93       	push	r24
     360:	5f 98       	cbi	0x0b, 7	; 11
     362:	81 e2       	ldi	r24, 0x21	; 33
     364:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     368:	80 e4       	ldi	r24, 0x40	; 64
     36a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     36e:	8f 91       	pop	r24
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <__vector_12>:
     37a:	1f 92       	push	r1
     37c:	0f 92       	push	r0
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	0f 92       	push	r0
     382:	11 24       	eor	r1, r1
     384:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     388:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     38c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <MIP>
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <Trigger>:
     39a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <MIP>
     39e:	81 11       	cpse	r24, r1
     3a0:	1b c0       	rjmp	.+54     	; 0x3d8 <Trigger+0x3e>
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <MIP>
     3a8:	57 9a       	sbi	0x0a, 7	; 10
     3aa:	50 98       	cbi	0x0a, 0	; 10
     3ac:	5f 98       	cbi	0x0b, 7	; 11
     3ae:	5f 9a       	sbi	0x0b, 7	; 11
     3b0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     3b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     3b8:	84 e1       	ldi	r24, 0x14	; 20
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     3c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	86 bb       	out	0x16, r24	; 22
     3c8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     3cc:	8a e0       	ldi	r24, 0x0A	; 10
     3ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     3d8:	08 95       	ret

000003da <CalculateDistance>:
     3da:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <ECHOHigh>
     3de:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <ECHOHigh+0x1>
     3e2:	89 2b       	or	r24, r25
     3e4:	31 f4       	brne	.+12     	; 0x3f2 <CalculateDistance+0x18>
     3e6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <ECHOLow>
     3ea:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <ECHOLow+0x1>
     3ee:	89 2b       	or	r24, r25
     3f0:	31 f1       	breq	.+76     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3f2:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <ECHOHigh>
     3f6:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <ECHOHigh+0x1>
     3fa:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <ECHOLow>
     3fe:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <ECHOLow+0x1>
     402:	cb 01       	movw	r24, r22
     404:	a0 e0       	ldi	r26, 0x00	; 0
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	dc 01       	movw	r26, r24
     40a:	99 27       	eor	r25, r25
     40c:	88 27       	eor	r24, r24
     40e:	bc 01       	movw	r22, r24
     410:	cd 01       	movw	r24, r26
     412:	62 0f       	add	r22, r18
     414:	73 1f       	adc	r23, r19
     416:	81 1d       	adc	r24, r1
     418:	91 1d       	adc	r25, r1
     41a:	0e 94 cc 05 	call	0xb98	; 0xb98 <__floatsisf>
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	5f e3       	ldi	r21, 0x3F	; 63
     426:	0e 94 30 06 	call	0xc60	; 0xc60 <__mulsf3>
     42a:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fixunssfsi>
     42e:	2a e3       	ldi	r18, 0x3A	; 58
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__udivmodsi4>
     43a:	c9 01       	movw	r24, r18
     43c:	08 95       	ret
     43e:	87 ee       	ldi	r24, 0xE7	; 231
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	08 95       	ret

00000444 <setupTimerInterrupt>:
}

void setupTimerInterrupt(void) {
	TCCR0A = (1 << WGM01); // CTC mode
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS02) | (1 << CS00); // Prescaler 1024
     448:	95 e0       	ldi	r25, 0x05	; 5
     44a:	95 bd       	out	0x25, r25	; 37
	OCR0A = 156; // Approx 100ms interrupt at 16MHz clock
     44c:	9c e9       	ldi	r25, 0x9C	; 156
     44e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A); // Enable compare match interrupt
     450:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     454:	08 95       	ret

00000456 <__vector_14>:
}

ISR(TIMER0_COMPA_vect) {
     456:	1f 92       	push	r1
     458:	0f 92       	push	r0
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	0f 92       	push	r0
     45e:	11 24       	eor	r1, r1
     460:	8f 93       	push	r24
	timerFlag = 1;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
     468:	8f 91       	pop	r24
     46a:	0f 90       	pop	r0
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	0f 90       	pop	r0
     470:	1f 90       	pop	r1
     472:	18 95       	reti

00000474 <main>:

/*
MAIN
*/

int main(void) {
     474:	2f 92       	push	r2
     476:	3f 92       	push	r3
     478:	4f 92       	push	r4
     47a:	5f 92       	push	r5
     47c:	6f 92       	push	r6
     47e:	7f 92       	push	r7
     480:	8f 92       	push	r8
     482:	9f 92       	push	r9
     484:	af 92       	push	r10
     486:	bf 92       	push	r11
     488:	cf 92       	push	r12
     48a:	df 92       	push	r13
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
    uint8_t key;

    init_uart0(103);
     498:	87 e6       	ldi	r24, 0x67	; 103
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 94 04 	call	0x928	; 0x928 <init_uart0>
		
	sei();
     4a0:	78 94       	sei

	fprintf_P(fio_0, PSTR("Initiating system. Please wait...\n\n\r"));
     4a2:	85 e4       	ldi	r24, 0x45	; 69
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	9f 93       	push	r25
     4a8:	8f 93       	push	r24
     4aa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     4ae:	8f 93       	push	r24
     4b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4b4:	8f 93       	push	r24
     4b6:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ba:	2f ef       	ldi	r18, 0xFF	; 255
     4bc:	37 ea       	ldi	r19, 0xA7	; 167
     4be:	41 e6       	ldi	r20, 0x61	; 97
     4c0:	21 50       	subi	r18, 0x01	; 1
     4c2:	30 40       	sbci	r19, 0x00	; 0
     4c4:	40 40       	sbci	r20, 0x00	; 0
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <main+0x4c>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <main+0x56>
     4ca:	00 00       	nop
	
	//PORTB &= ~(1 << GREEN_LED);
	_delay_ms(2000);
	fprintf_P(fio_0, PSTR("Testing green LED...\n\r"));
     4cc:	8e e2       	ldi	r24, 0x2E	; 46
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	9f 93       	push	r25
     4d2:	8f 93       	push	r24
     4d4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     4d8:	8f 93       	push	r24
     4da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4de:	8f 93       	push	r24
     4e0:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
	DDRB |= (1 << GREEN_LED);
     4e4:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= (1 << GREEN_LED);
     4e6:	29 9a       	sbi	0x05, 1	; 5
     4e8:	8f ef       	ldi	r24, 0xFF	; 255
     4ea:	97 ea       	ldi	r25, 0xA7	; 167
     4ec:	21 e6       	ldi	r18, 0x61	; 97
     4ee:	81 50       	subi	r24, 0x01	; 1
     4f0:	90 40       	sbci	r25, 0x00	; 0
     4f2:	20 40       	sbci	r18, 0x00	; 0
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <main+0x7a>
     4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <main+0x84>
     4f8:	00 00       	nop
	_delay_ms(2000);
	PORTB &= ~(1 << GREEN_LED);
     4fa:	29 98       	cbi	0x05, 1	; 5
     4fc:	3f ef       	ldi	r19, 0xFF	; 255
     4fe:	4e e9       	ldi	r20, 0x9E	; 158
     500:	84 e2       	ldi	r24, 0x24	; 36
     502:	31 50       	subi	r19, 0x01	; 1
     504:	40 40       	sbci	r20, 0x00	; 0
     506:	80 40       	sbci	r24, 0x00	; 0
     508:	e1 f7       	brne	.-8      	; 0x502 <main+0x8e>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <main+0x98>
     50c:	00 00       	nop
	_delay_ms(750);
	fprintf_P(fio_0, PSTR("Testing orange LED...\n\r"));
     50e:	86 e1       	ldi	r24, 0x16	; 22
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     51a:	8f 93       	push	r24
     51c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     520:	8f 93       	push	r24
     522:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
	DDRB |= (1 << ORANGE_LED);
     526:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << ORANGE_LED);
     528:	2a 9a       	sbi	0x05, 2	; 5
     52a:	9f ef       	ldi	r25, 0xFF	; 255
     52c:	27 ea       	ldi	r18, 0xA7	; 167
     52e:	31 e6       	ldi	r19, 0x61	; 97
     530:	91 50       	subi	r25, 0x01	; 1
     532:	20 40       	sbci	r18, 0x00	; 0
     534:	30 40       	sbci	r19, 0x00	; 0
     536:	e1 f7       	brne	.-8      	; 0x530 <main+0xbc>
     538:	00 c0       	rjmp	.+0      	; 0x53a <main+0xc6>
     53a:	00 00       	nop
	_delay_ms(2000);
	PORTB &= ~(1 << ORANGE_LED);
     53c:	2a 98       	cbi	0x05, 2	; 5
     53e:	4f ef       	ldi	r20, 0xFF	; 255
     540:	8e e9       	ldi	r24, 0x9E	; 158
     542:	94 e2       	ldi	r25, 0x24	; 36
     544:	41 50       	subi	r20, 0x01	; 1
     546:	80 40       	sbci	r24, 0x00	; 0
     548:	90 40       	sbci	r25, 0x00	; 0
     54a:	e1 f7       	brne	.-8      	; 0x544 <main+0xd0>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <main+0xda>
     54e:	00 00       	nop
	_delay_ms(750);
	fprintf_P(fio_0, PSTR("Testing red LED...\n\r"));
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	9f 93       	push	r25
     556:	8f 93       	push	r24
     558:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     55c:	8f 93       	push	r24
     55e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     562:	8f 93       	push	r24
     564:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
	DDRB |= (1 << RED_LED);
     568:	23 9a       	sbi	0x04, 3	; 4
	PORTB |= (1 << RED_LED);
     56a:	2b 9a       	sbi	0x05, 3	; 5
     56c:	2f ef       	ldi	r18, 0xFF	; 255
     56e:	37 ea       	ldi	r19, 0xA7	; 167
     570:	41 e6       	ldi	r20, 0x61	; 97
     572:	21 50       	subi	r18, 0x01	; 1
     574:	30 40       	sbci	r19, 0x00	; 0
     576:	40 40       	sbci	r20, 0x00	; 0
     578:	e1 f7       	brne	.-8      	; 0x572 <main+0xfe>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <main+0x108>
     57c:	00 00       	nop
	_delay_ms(2000);
	PORTB &= ~(1 << RED_LED);
     57e:	2b 98       	cbi	0x05, 3	; 5
     580:	8f ef       	ldi	r24, 0xFF	; 255
     582:	9e e9       	ldi	r25, 0x9E	; 158
     584:	24 e2       	ldi	r18, 0x24	; 36
     586:	81 50       	subi	r24, 0x01	; 1
     588:	90 40       	sbci	r25, 0x00	; 0
     58a:	20 40       	sbci	r18, 0x00	; 0
     58c:	e1 f7       	brne	.-8      	; 0x586 <main+0x112>
     58e:	00 c0       	rjmp	.+0      	; 0x590 <main+0x11c>
     590:	00 00       	nop
	_delay_ms(750);
	fprintf_P(fio_0, PSTR("Testing speaker...\n\r"));
     592:	8c ee       	ldi	r24, 0xEC	; 236
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	9f 93       	push	r25
     598:	8f 93       	push	r24
     59a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     59e:	8f 93       	push	r24
     5a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5a4:	8f 93       	push	r24
     5a6:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
	DDRB |= (1 << SPEAKER_PIN);
     5aa:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1 << SPEAKER_PIN); // Turn ON speaker
     5ac:	2c 9a       	sbi	0x05, 4	; 5
     5ae:	3f ef       	ldi	r19, 0xFF	; 255
     5b0:	47 ea       	ldi	r20, 0xA7	; 167
     5b2:	81 e6       	ldi	r24, 0x61	; 97
     5b4:	31 50       	subi	r19, 0x01	; 1
     5b6:	40 40       	sbci	r20, 0x00	; 0
     5b8:	80 40       	sbci	r24, 0x00	; 0
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <main+0x140>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <main+0x14a>
     5be:	00 00       	nop
	_delay_ms(2000);
	PORTB &= ~(1 << SPEAKER_PIN);
     5c0:	2c 98       	cbi	0x05, 4	; 5
     5c2:	9f ef       	ldi	r25, 0xFF	; 255
     5c4:	23 ed       	ldi	r18, 0xD3	; 211
     5c6:	30 e3       	ldi	r19, 0x30	; 48
     5c8:	91 50       	subi	r25, 0x01	; 1
     5ca:	20 40       	sbci	r18, 0x00	; 0
     5cc:	30 40       	sbci	r19, 0x00	; 0
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <main+0x154>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <main+0x15e>
     5d2:	00 00       	nop
	_delay_ms(1000);
	PORTB |= (1 << GREEN_LED);
     5d4:	29 9a       	sbi	0x05, 1	; 5
     5d6:	4f ef       	ldi	r20, 0xFF	; 255
     5d8:	89 e6       	ldi	r24, 0x69	; 105
     5da:	98 e1       	ldi	r25, 0x18	; 24
     5dc:	41 50       	subi	r20, 0x01	; 1
     5de:	80 40       	sbci	r24, 0x00	; 0
     5e0:	90 40       	sbci	r25, 0x00	; 0
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0x168>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <main+0x172>
     5e6:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~(1 << GREEN_LED);
     5e8:	29 98       	cbi	0x05, 1	; 5
     5ea:	2f ef       	ldi	r18, 0xFF	; 255
     5ec:	39 e6       	ldi	r19, 0x69	; 105
     5ee:	48 e1       	ldi	r20, 0x18	; 24
     5f0:	21 50       	subi	r18, 0x01	; 1
     5f2:	30 40       	sbci	r19, 0x00	; 0
     5f4:	40 40       	sbci	r20, 0x00	; 0
     5f6:	e1 f7       	brne	.-8      	; 0x5f0 <main+0x17c>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <main+0x186>
     5fa:	00 00       	nop
	_delay_ms(500);
	PORTB |= (1 << GREEN_LED);
     5fc:	29 9a       	sbi	0x05, 1	; 5
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	99 e6       	ldi	r25, 0x69	; 105
     602:	28 e1       	ldi	r18, 0x18	; 24
     604:	81 50       	subi	r24, 0x01	; 1
     606:	90 40       	sbci	r25, 0x00	; 0
     608:	20 40       	sbci	r18, 0x00	; 0
     60a:	e1 f7       	brne	.-8      	; 0x604 <main+0x190>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <main+0x19a>
     60e:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~(1 << GREEN_LED);
     610:	29 98       	cbi	0x05, 1	; 5
     612:	3f ef       	ldi	r19, 0xFF	; 255
     614:	49 e6       	ldi	r20, 0x69	; 105
     616:	88 e1       	ldi	r24, 0x18	; 24
     618:	31 50       	subi	r19, 0x01	; 1
     61a:	40 40       	sbci	r20, 0x00	; 0
     61c:	80 40       	sbci	r24, 0x00	; 0
     61e:	e1 f7       	brne	.-8      	; 0x618 <main+0x1a4>
     620:	00 c0       	rjmp	.+0      	; 0x622 <main+0x1ae>
     622:	00 00       	nop
	_delay_ms(500);
	PORTB |= (1 << GREEN_LED);
     624:	29 9a       	sbi	0x05, 1	; 5
     626:	9f ef       	ldi	r25, 0xFF	; 255
     628:	29 e6       	ldi	r18, 0x69	; 105
     62a:	38 e1       	ldi	r19, 0x18	; 24
     62c:	91 50       	subi	r25, 0x01	; 1
     62e:	20 40       	sbci	r18, 0x00	; 0
     630:	30 40       	sbci	r19, 0x00	; 0
     632:	e1 f7       	brne	.-8      	; 0x62c <main+0x1b8>
     634:	00 c0       	rjmp	.+0      	; 0x636 <main+0x1c2>
     636:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~(1 << GREEN_LED);
     638:	29 98       	cbi	0x05, 1	; 5
     63a:	4f ef       	ldi	r20, 0xFF	; 255
     63c:	89 e6       	ldi	r24, 0x69	; 105
     63e:	98 e1       	ldi	r25, 0x18	; 24
     640:	41 50       	subi	r20, 0x01	; 1
     642:	80 40       	sbci	r24, 0x00	; 0
     644:	90 40       	sbci	r25, 0x00	; 0
     646:	e1 f7       	brne	.-8      	; 0x640 <main+0x1cc>
     648:	00 c0       	rjmp	.+0      	; 0x64a <main+0x1d6>
     64a:	00 00       	nop
	_delay_ms(500);
	PORTB |= (1 << GREEN_LED);
     64c:	29 9a       	sbi	0x05, 1	; 5
     64e:	2f ef       	ldi	r18, 0xFF	; 255
     650:	39 e6       	ldi	r19, 0x69	; 105
     652:	48 e1       	ldi	r20, 0x18	; 24
     654:	21 50       	subi	r18, 0x01	; 1
     656:	30 40       	sbci	r19, 0x00	; 0
     658:	40 40       	sbci	r20, 0x00	; 0
     65a:	e1 f7       	brne	.-8      	; 0x654 <main+0x1e0>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <main+0x1ea>
     65e:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~(1 << GREEN_LED);
     660:	29 98       	cbi	0x05, 1	; 5
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	99 e6       	ldi	r25, 0x69	; 105
     666:	28 e1       	ldi	r18, 0x18	; 24
     668:	81 50       	subi	r24, 0x01	; 1
     66a:	90 40       	sbci	r25, 0x00	; 0
     66c:	20 40       	sbci	r18, 0x00	; 0
     66e:	e1 f7       	brne	.-8      	; 0x668 <main+0x1f4>
     670:	00 c0       	rjmp	.+0      	; 0x672 <main+0x1fe>
     672:	00 00       	nop
	_delay_ms(500);
	PORTB |= (1 << GREEN_LED);
     674:	29 9a       	sbi	0x05, 1	; 5
     676:	3f ef       	ldi	r19, 0xFF	; 255
     678:	49 e6       	ldi	r20, 0x69	; 105
     67a:	88 e1       	ldi	r24, 0x18	; 24
     67c:	31 50       	subi	r19, 0x01	; 1
     67e:	40 40       	sbci	r20, 0x00	; 0
     680:	80 40       	sbci	r24, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <main+0x208>
     684:	00 c0       	rjmp	.+0      	; 0x686 <main+0x212>
     686:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~(1 << GREEN_LED);
     688:	29 98       	cbi	0x05, 1	; 5
     68a:	9f ef       	ldi	r25, 0xFF	; 255
     68c:	23 ed       	ldi	r18, 0xD3	; 211
     68e:	30 e3       	ldi	r19, 0x30	; 48
     690:	91 50       	subi	r25, 0x01	; 1
     692:	20 40       	sbci	r18, 0x00	; 0
     694:	30 40       	sbci	r19, 0x00	; 0
     696:	e1 f7       	brne	.-8      	; 0x690 <main+0x21c>
     698:	00 c0       	rjmp	.+0      	; 0x69a <main+0x226>
     69a:	00 00       	nop
	_delay_ms(1000);
	fprintf_P(fio_0, PSTR("\nSystem Ready. Press 'T' or 't' to trigger sensor.\n\r"));
     69c:	87 eb       	ldi	r24, 0xB7	; 183
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	9f 93       	push	r25
     6a2:	8f 93       	push	r24
     6a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     6a8:	8f 93       	push	r24
     6aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6ae:	8f 93       	push	r24
     6b0:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
	PORTB |= (1 << ORANGE_LED);
     6b4:	2a 9a       	sbi	0x05, 2	; 5
	
	//initADCSetup();
	//setupPWMOutput();
	setupTimerInterrupt();
     6b6:	0e 94 22 02 	call	0x444	; 0x444 <setupTimerInterrupt>

	PORTB &= ~(1 << GREEN_LED);
     6ba:	29 98       	cbi	0x05, 1	; 5
     6bc:	8d b7       	in	r24, 0x3d	; 61
     6be:	9e b7       	in	r25, 0x3e	; 62
     6c0:	48 96       	adiw	r24, 0x18	; 24
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	9e bf       	out	0x3e, r25	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	8d bf       	out	0x3d, r24	; 61
		    fprintf_P(fio_0, PSTR("\n\r"));
		    break;

		    case 'T':
		    case 't':
		    fprintf_P(fio_0, PSTR("Triggering Sensor...\n\r"));
     6cc:	0f 2e       	mov	r0, r31
     6ce:	fd e9       	ldi	r31, 0x9D	; 157
     6d0:	cf 2e       	mov	r12, r31
     6d2:	f1 e0       	ldi	r31, 0x01	; 1
     6d4:	df 2e       	mov	r13, r31
     6d6:	f0 2d       	mov	r31, r0
		    Trigger();
		    
		    while (MIP == 1) {};  // Wait for measurement to complete
		    
		    // Print raw timer values
		    fprintf_P(fio_0, PSTR("Raw Timer Values: ECHOHigh = %d, ECHOLow = %d, MIP = %d\n\r"), ECHOHigh, ECHOLow, MIP);
     6d8:	0f 2e       	mov	r0, r31
     6da:	f3 e6       	ldi	r31, 0x63	; 99
     6dc:	ef 2e       	mov	r14, r31
     6de:	f1 e0       	ldi	r31, 0x01	; 1
     6e0:	ff 2e       	mov	r15, r31
     6e2:	f0 2d       	mov	r31, r0
				    break;
			    }
			    
			    else {
				    
				    fprintf_P(fio_0, PSTR("Calculated Distance: %d cm\n\r"), distance);
     6e4:	0f 2e       	mov	r0, r31
     6e6:	f6 ed       	ldi	r31, 0xD6	; 214
     6e8:	af 2e       	mov	r10, r31
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	bf 2e       	mov	r11, r31
     6ee:	f0 2d       	mov	r31, r0
				    distance = CalculateDistance();
					_delay_ms(500);
					PORTB &= ~(1 << SPEAKER_PIN);
				    
				    if (distance <= DISTANCE_THRESHOLD) {
					    fprintf_P(fio_0, PSTR("Distance is too close to the door. Door will remain closed.\n\r"));
     6f0:	0f 2e       	mov	r0, r31
     6f2:	f8 e9       	ldi	r31, 0x98	; 152
     6f4:	2f 2e       	mov	r2, r31
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	3f 2e       	mov	r3, r31
     6fa:	f0 2d       	mov	r31, r0
		    else {
			    
			    unsigned int distance = CalculateDistance();

			    if (distance > MAX_DISTANCE) {
				    fprintf_P(fio_0, PSTR("Distance is over the 100cm threshold. Door will remain closed.\n\r"));
     6fc:	0f 2e       	mov	r0, r31
     6fe:	f3 ef       	ldi	r31, 0xF3	; 243
     700:	8f 2e       	mov	r8, r31
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	9f 2e       	mov	r9, r31
     706:	f0 2d       	mov	r31, r0
		    
		    // Print raw timer values
		    fprintf_P(fio_0, PSTR("Raw Timer Values: ECHOHigh = %d, ECHOLow = %d, MIP = %d\n\r"), ECHOHigh, ECHOLow, MIP);

		    if (ECHOHigh == 0 && ECHOLow == 0) {
			    fprintf_P(fio_0, PSTR("No echo detected! Check wiring or sensor.\n\r"));
     708:	0f 2e       	mov	r0, r31
     70a:	f7 e3       	ldi	r31, 0x37	; 55
     70c:	6f 2e       	mov	r6, r31
     70e:	f1 e0       	ldi	r31, 0x01	; 1
     710:	7f 2e       	mov	r7, r31
     712:	f0 2d       	mov	r31, r0
			 case  'b':
				return 0;
			    break;
		    }
		    
		    fprintf_P(fio_0, PSTR("\n\r"));
     714:	0f 2e       	mov	r0, r31
     716:	f4 e3       	ldi	r31, 0x34	; 52
     718:	4f 2e       	mov	r4, r31
     71a:	f1 e0       	ldi	r31, 0x01	; 1
     71c:	5f 2e       	mov	r5, r31
     71e:	f0 2d       	mov	r31, r0
		    
		    break;

		    default:
		    fprintf_P(fio_0, PSTR("Invalid command! Press 'T' or 't' to trigger.\n\r"));
     720:	08 e6       	ldi	r16, 0x68	; 104
     722:	10 e0       	ldi	r17, 0x00	; 0
	    while (uart0_RxCount() == 0) {};  // Wait for user input
	    key = uart0_getc();  // Read the character

	    switch (key) {
		    case 13:
		    fprintf_P(fio_0, PSTR("\n\r"));
     724:	c4 eb       	ldi	r28, 0xB4	; 180
     726:	d1 e0       	ldi	r29, 0x01	; 1
	setupTimerInterrupt();

	PORTB &= ~(1 << GREEN_LED);

    while (1) {
	    while (uart0_RxCount() == 0) {};  // Wait for user input
     728:	0e 94 84 05 	call	0xb08	; 0xb08 <uart0_RxCount>
     72c:	88 23       	and	r24, r24
     72e:	e1 f3       	breq	.-8      	; 0x728 <main+0x2b4>
	    key = uart0_getc();  // Read the character
     730:	0e 94 2d 05 	call	0xa5a	; 0xa5a <uart0_getc>

	    switch (key) {
     734:	84 35       	cpi	r24, 0x54	; 84
     736:	e1 f0       	breq	.+56     	; 0x770 <main+0x2fc>
     738:	30 f4       	brcc	.+12     	; 0x746 <main+0x2d2>
     73a:	8d 30       	cpi	r24, 0x0D	; 13
     73c:	51 f0       	breq	.+20     	; 0x752 <main+0x2de>
     73e:	82 34       	cpi	r24, 0x42	; 66
     740:	09 f4       	brne	.+2      	; 0x744 <main+0x2d0>
     742:	dd c0       	rjmp	.+442    	; 0x8fe <main+0x48a>
     744:	ca c0       	rjmp	.+404    	; 0x8da <main+0x466>
     746:	82 36       	cpi	r24, 0x62	; 98
     748:	09 f4       	brne	.+2      	; 0x74c <main+0x2d8>
     74a:	d9 c0       	rjmp	.+434    	; 0x8fe <main+0x48a>
     74c:	84 37       	cpi	r24, 0x74	; 116
     74e:	81 f0       	breq	.+32     	; 0x770 <main+0x2fc>
     750:	c4 c0       	rjmp	.+392    	; 0x8da <main+0x466>
		    case 13:
		    fprintf_P(fio_0, PSTR("\n\r"));
     752:	df 93       	push	r29
     754:	cf 93       	push	r28
     756:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     75a:	8f 93       	push	r24
     75c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     760:	8f 93       	push	r24
     762:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
		    break;
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	dc cf       	rjmp	.-72     	; 0x728 <main+0x2b4>

		    case 'T':
		    case 't':
		    fprintf_P(fio_0, PSTR("Triggering Sensor...\n\r"));
     770:	df 92       	push	r13
     772:	cf 92       	push	r12
     774:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     778:	8f 93       	push	r24
     77a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     77e:	8f 93       	push	r24
     780:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
		    Trigger();
     784:	0e 94 cd 01 	call	0x39a	; 0x39a <Trigger>
		    
		    while (MIP == 1) {};  // Wait for measurement to complete
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <MIP>
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	e1 f3       	breq	.-8      	; 0x790 <main+0x31c>
		    
		    // Print raw timer values
		    fprintf_P(fio_0, PSTR("Raw Timer Values: ECHOHigh = %d, ECHOLow = %d, MIP = %d\n\r"), ECHOHigh, ECHOLow, MIP);
     798:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <MIP>
     79c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <ECHOLow>
     7a0:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <ECHOLow+0x1>
     7a4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <ECHOHigh>
     7a8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <ECHOHigh+0x1>
     7ac:	1f 92       	push	r1
     7ae:	4f 93       	push	r20
     7b0:	3f 93       	push	r19
     7b2:	2f 93       	push	r18
     7b4:	9f 93       	push	r25
     7b6:	8f 93       	push	r24
     7b8:	ff 92       	push	r15
     7ba:	ef 92       	push	r14
     7bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     7c0:	8f 93       	push	r24
     7c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7c6:	8f 93       	push	r24
     7c8:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>

		    if (ECHOHigh == 0 && ECHOLow == 0) {
     7cc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <ECHOHigh>
     7d0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <ECHOHigh+0x1>
     7d4:	2d b7       	in	r18, 0x3d	; 61
     7d6:	3e b7       	in	r19, 0x3e	; 62
     7d8:	26 5f       	subi	r18, 0xF6	; 246
     7da:	3f 4f       	sbci	r19, 0xFF	; 255
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	3e bf       	out	0x3e, r19	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	2d bf       	out	0x3d, r18	; 61
     7e6:	89 2b       	or	r24, r25
     7e8:	31 f5       	brne	.+76     	; 0x836 <main+0x3c2>
     7ea:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <ECHOLow>
     7ee:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <ECHOLow+0x1>
     7f2:	89 2b       	or	r24, r25
     7f4:	01 f5       	brne	.+64     	; 0x836 <main+0x3c2>
			    fprintf_P(fio_0, PSTR("No echo detected! Check wiring or sensor.\n\r"));
     7f6:	7f 92       	push	r7
     7f8:	6f 92       	push	r6
     7fa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     7fe:	8f 93       	push	r24
     800:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     804:	8f 93       	push	r24
     806:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
			    PORTB |= (1 << RED_LED); // turn red LED on
     80a:	2b 9a       	sbi	0x05, 3	; 5
			    PORTB &= ~(1 << GREEN_LED);
     80c:	29 98       	cbi	0x05, 1	; 5
			    PORTB &= ~(1 << ORANGE_LED);
     80e:	2a 98       	cbi	0x05, 2	; 5
			 case  'b':
				return 0;
			    break;
		    }
		    
		    fprintf_P(fio_0, PSTR("\n\r"));
     810:	5f 92       	push	r5
     812:	4f 92       	push	r4
     814:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     818:	8f 93       	push	r24
     81a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     81e:	8f 93       	push	r24
     820:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
		    
		    break;
     824:	8d b7       	in	r24, 0x3d	; 61
     826:	9e b7       	in	r25, 0x3e	; 62
     828:	08 96       	adiw	r24, 0x08	; 8
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	9e bf       	out	0x3e, r25	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	8d bf       	out	0x3d, r24	; 61
     834:	79 cf       	rjmp	.-270    	; 0x728 <main+0x2b4>
			    PORTB &= ~(1 << ORANGE_LED);
		    }
		    
		    else {
			    
			    unsigned int distance = CalculateDistance();
     836:	0e 94 ed 01 	call	0x3da	; 0x3da <CalculateDistance>

			    if (distance > MAX_DISTANCE) {
     83a:	85 36       	cpi	r24, 0x65	; 101
     83c:	91 05       	cpc	r25, r1
     83e:	a8 f0       	brcs	.+42     	; 0x86a <main+0x3f6>
				    fprintf_P(fio_0, PSTR("Distance is over the 100cm threshold. Door will remain closed.\n\r"));
     840:	9f 92       	push	r9
     842:	8f 92       	push	r8
     844:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     848:	8f 93       	push	r24
     84a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     84e:	8f 93       	push	r24
     850:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
				    PORTB |= (1 << ORANGE_LED); // turn orange LED on
     854:	2a 9a       	sbi	0x05, 2	; 5
				    PORTB &= ~(1 << GREEN_LED);  // Turn green LED OFF
     856:	29 98       	cbi	0x05, 1	; 5
				    PORTB &= ~(1 << RED_LED);
     858:	2b 98       	cbi	0x05, 3	; 5
					PORTB &= ~(1 << SPEAKER_PIN);
     85a:	2c 98       	cbi	0x05, 4	; 5
					distance = CalculateDistance();
     85c:	0e 94 ed 01 	call	0x3da	; 0x3da <CalculateDistance>
				    break;
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	5f cf       	rjmp	.-322    	; 0x728 <main+0x2b4>
			    }
			    
			    else {
				    
				    fprintf_P(fio_0, PSTR("Calculated Distance: %d cm\n\r"), distance);
     86a:	9f 93       	push	r25
     86c:	8f 93       	push	r24
     86e:	bf 92       	push	r11
     870:	af 92       	push	r10
     872:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     876:	8f 93       	push	r24
     878:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     87c:	8f 93       	push	r24
     87e:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
				    PORTB &= ~(1 << RED_LED);  // Turn Red LED OFF if motion is detected
     882:	2b 98       	cbi	0x05, 3	; 5
				    PORTB &= ~(1 << ORANGE_LED);
     884:	2a 98       	cbi	0x05, 2	; 5
					PORTB |= (1 << GREEN_LED); 
     886:	29 9a       	sbi	0x05, 1	; 5
				    PORTB |= (1 << SPEAKER_PIN); // Turn ON speaker
     888:	2c 9a       	sbi	0x05, 4	; 5
				    distance = CalculateDistance();
     88a:	0e 94 ed 01 	call	0x3da	; 0x3da <CalculateDistance>
     88e:	2f ef       	ldi	r18, 0xFF	; 255
     890:	39 e6       	ldi	r19, 0x69	; 105
     892:	48 e1       	ldi	r20, 0x18	; 24
     894:	21 50       	subi	r18, 0x01	; 1
     896:	30 40       	sbci	r19, 0x00	; 0
     898:	40 40       	sbci	r20, 0x00	; 0
     89a:	e1 f7       	brne	.-8      	; 0x894 <main+0x420>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <main+0x42a>
     89e:	00 00       	nop
					_delay_ms(500);
					PORTB &= ~(1 << SPEAKER_PIN);
     8a0:	2c 98       	cbi	0x05, 4	; 5
				    
				    if (distance <= DISTANCE_THRESHOLD) {
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	02 97       	sbiw	r24, 0x02	; 2
     8b0:	90 f4       	brcc	.+36     	; 0x8d6 <main+0x462>
					    fprintf_P(fio_0, PSTR("Distance is too close to the door. Door will remain closed.\n\r"));
     8b2:	3f 92       	push	r3
     8b4:	2f 92       	push	r2
     8b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     8ba:	8f 93       	push	r24
     8bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8c0:	8f 93       	push	r24
     8c2:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
					    PORTB &= ~(1 << GREEN_LED);  // Turn green LED OFF if motion is detected
     8c6:	29 98       	cbi	0x05, 1	; 5
					    PORTB |= (1 << RED_LED); // turn red LED on
     8c8:	2b 9a       	sbi	0x05, 3	; 5
					    PORTB &= ~(1 << SPEAKER_PIN);
     8ca:	2c 98       	cbi	0x05, 4	; 5
					    break;
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	29 cf       	rjmp	.-430    	; 0x728 <main+0x2b4>
				    }
				    
					
				    else {
					    PORTB |= (1 << GREEN_LED);  // Keep LED ON otherwise
     8d6:	29 9a       	sbi	0x05, 1	; 5
					    break;
     8d8:	27 cf       	rjmp	.-434    	; 0x728 <main+0x2b4>
		    fprintf_P(fio_0, PSTR("\n\r"));
		    
		    break;

		    default:
		    fprintf_P(fio_0, PSTR("Invalid command! Press 'T' or 't' to trigger.\n\r"));
     8da:	1f 93       	push	r17
     8dc:	0f 93       	push	r16
     8de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     8e2:	8f 93       	push	r24
     8e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8e8:	8f 93       	push	r24
     8ea:	0e 94 e7 06 	call	0xdce	; 0xdce <fprintf_P>
		    PORTB |= (1 << RED_LED); // turn red LED on
     8ee:	2b 9a       	sbi	0x05, 3	; 5
		    PORTB &= ~(1 << GREEN_LED);
     8f0:	29 98       	cbi	0x05, 1	; 5
		    PORTB &= ~(1 << ORANGE_LED);
     8f2:	2a 98       	cbi	0x05, 2	; 5
		    break;
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	15 cf       	rjmp	.-470    	; 0x728 <main+0x2b4>
	    }
    }

    return 0;
    }
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	bf 90       	pop	r11
     914:	af 90       	pop	r10
     916:	9f 90       	pop	r9
     918:	8f 90       	pop	r8
     91a:	7f 90       	pop	r7
     91c:	6f 90       	pop	r6
     91e:	5f 90       	pop	r5
     920:	4f 90       	pop	r4
     922:	3f 90       	pop	r3
     924:	2f 90       	pop	r2
     926:	08 95       	ret

00000928 <init_uart0>:


void init_uart0(unsigned int  BAUD) {// initialize uart 

	// Set baud rate
	UBRR0H = ((unsigned char) (BAUD>>8)) & ~0x80;
     928:	9f 77       	andi	r25, 0x7F	; 127
     92a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char) BAUD;
     92e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
     932:	88 e9       	ldi	r24, 0x98	; 152
     934:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
     938:	8e e0       	ldi	r24, 0x0E	; 14
     93a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
    DDRD |= (1<<DDD1);        				//  Set DDR for Txd Pin on PortD 
     93e:	51 9a       	sbi	0x0a, 1	; 10
    DDRD &= ~(1<<DDD0);        				//  Set DDR for Rxd Pin on PortD 
     940:	50 98       	cbi	0x0a, 0	; 10


    TxDBuffWR0  = TxDBuffRD0 = TxDBuff0;			// Init Queues 
     942:	8e e5       	ldi	r24, 0x5E	; 94
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <TxDBuffRD0+0x1>
     94a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <TxDBuffRD0>
     94e:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <TxDBuffWR0+0x1>
     952:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <TxDBuffWR0>
    RxDBuffWR0  = RxDBuffRD0 = RxDBuff0;
     956:	8e e1       	ldi	r24, 0x1E	; 30
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <RxDBuffRD0+0x1>
     95e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <RxDBuffRD0>
     962:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <RxDBuffWR0+0x1>
     966:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <RxDBuffWR0>
    TxDCnt0 = 0;
     96a:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <TxDCnt0>
    RxDCnt0 = 0;
     96e:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <RxDCnt0>
     972:	08 95       	ret

00000974 <__vector_19>:

// ******************************************************
//	Handle for Tx Interrupt 
//******************************************************

ISR (USART_UDRE_vect)  {		// Handler for uart data buffer empty interrupt 
     974:	1f 92       	push	r1
     976:	0f 92       	push	r0
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	0f 92       	push	r0
     97c:	11 24       	eor	r1, r1
     97e:	2f 93       	push	r18
     980:	8f 93       	push	r24
     982:	9f 93       	push	r25
     984:	ef 93       	push	r30
     986:	ff 93       	push	r31

    if (TxDCnt0 > 0) {
     988:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <TxDCnt0>
     98c:	88 23       	and	r24, r24
     98e:	39 f1       	breq	.+78     	; 0x9de <__vector_19+0x6a>
        UDR0 = *TxDBuffRD0;           		// write byte to data buffer 
     990:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <TxDBuffRD0>
     994:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <TxDBuffRD0+0x1>
     998:	80 81       	ld	r24, Z
     99a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
        if (++TxDBuffRD0 >= TxDBuff0 + UART_BUF_SIZE) // Wrap Pointer 
     99e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TxDBuffRD0>
     9a2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TxDBuffRD0+0x1>
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	21 e0       	ldi	r18, 0x01	; 1
     9aa:	8e 39       	cpi	r24, 0x9E	; 158
     9ac:	92 07       	cpc	r25, r18
     9ae:	28 f4       	brcc	.+10     	; 0x9ba <__vector_19+0x46>
     9b0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <TxDBuffRD0+0x1>
     9b4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <TxDBuffRD0>
     9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <__vector_19+0x52>
            TxDBuffRD0 = TxDBuff0;
     9ba:	8e e5       	ldi	r24, 0x5E	; 94
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <TxDBuffRD0+0x1>
     9c2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <TxDBuffRD0>
        if(--TxDCnt0 == 0)             			// if buffer is empty: 
     9c6:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <TxDCnt0>
     9ca:	81 50       	subi	r24, 0x01	; 1
     9cc:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <TxDCnt0>
     9d0:	81 11       	cpse	r24, r1
     9d2:	05 c0       	rjmp	.+10     	; 0x9de <__vector_19+0x6a>
            UCSR0B&=~(1<<UDRIE0);                    // disable UDRIE int 
     9d4:	e1 ec       	ldi	r30, 0xC1	; 193
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
     9da:	8f 7d       	andi	r24, 0xDF	; 223
     9dc:	80 83       	st	Z, r24
    }
}
     9de:	ff 91       	pop	r31
     9e0:	ef 91       	pop	r30
     9e2:	9f 91       	pop	r25
     9e4:	8f 91       	pop	r24
     9e6:	2f 91       	pop	r18
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	0f 90       	pop	r0
     9ee:	1f 90       	pop	r1
     9f0:	18 95       	reti

000009f2 <__vector_18>:

// ******************************************************
//	Handle for Rx Interrupt 
//******************************************************

ISR (USART_RX_vect)  {  // Interrupt handler for receive complete interrupt 
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	0f 92       	push	r0
     9fa:	11 24       	eor	r1, r1
     9fc:	2f 93       	push	r18
     9fe:	8f 93       	push	r24
     a00:	9f 93       	push	r25
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31

	unsigned char key;
	 key = UDR0;            // Get UDR --> Buff 
     a06:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	 *RxDBuffWR0 = key;
     a0a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <RxDBuffWR0>
     a0e:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <RxDBuffWR0+0x1>
     a12:	80 83       	st	Z, r24
	if(UartEchoOn==1) {
		if(!uart0_write_buff_full())
			uart0_putc(key);
		}
    RxDCnt0++;
     a14:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <RxDCnt0>
     a18:	8f 5f       	subi	r24, 0xFF	; 255
     a1a:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <RxDCnt0>
    if (++RxDBuffWR0 >= RxDBuff0 + UART_BUF_SIZE) // Wrap Pointer 
     a1e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <RxDBuffWR0>
     a22:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <RxDBuffWR0+0x1>
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	8e 35       	cpi	r24, 0x5E	; 94
     a2c:	92 07       	cpc	r25, r18
     a2e:	28 f4       	brcc	.+10     	; 0xa3a <__vector_18+0x48>
     a30:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <RxDBuffWR0+0x1>
     a34:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <RxDBuffWR0>
     a38:	06 c0       	rjmp	.+12     	; 0xa46 <__vector_18+0x54>
        RxDBuffWR0 = RxDBuff0;
     a3a:	8e e1       	ldi	r24, 0x1E	; 30
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <RxDBuffWR0+0x1>
     a42:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <RxDBuffWR0>
}
     a46:	ff 91       	pop	r31
     a48:	ef 91       	pop	r30
     a4a:	9f 91       	pop	r25
     a4c:	8f 91       	pop	r24
     a4e:	2f 91       	pop	r18
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <uart0_getc>:
// *****************************************************

char  uart0_getc(void) {
    unsigned char  c;

    if(RxDCnt0 > 0){
     a5a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <RxDCnt0>
     a5e:	88 23       	and	r24, r24
     a60:	e1 f0       	breq	.+56     	; 0xa9a <uart0_getc+0x40>
	
		cli();
     a62:	f8 94       	cli
		RxDCnt0--;
     a64:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <RxDCnt0>
     a68:	81 50       	subi	r24, 0x01	; 1
     a6a:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <RxDCnt0>
		c = *RxDBuffRD0;              // Get Buff Char and Return  
     a6e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <RxDBuffRD0>
     a72:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <RxDBuffRD0+0x1>
     a76:	81 91       	ld	r24, Z+
		if (++RxDBuffRD0 >= RxDBuff0 + UART_BUF_SIZE)  // Wrap Pointer 
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	ee 35       	cpi	r30, 0x5E	; 94
     a7c:	f9 07       	cpc	r31, r25
     a7e:	28 f4       	brcc	.+10     	; 0xa8a <uart0_getc+0x30>
     a80:	f0 93 19 01 	sts	0x0119, r31	; 0x800119 <RxDBuffRD0+0x1>
     a84:	e0 93 18 01 	sts	0x0118, r30	; 0x800118 <RxDBuffRD0>
     a88:	06 c0       	rjmp	.+12     	; 0xa96 <uart0_getc+0x3c>
			RxDBuffRD0 = RxDBuff0;
     a8a:	2e e1       	ldi	r18, 0x1E	; 30
     a8c:	31 e0       	ldi	r19, 0x01	; 1
     a8e:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <RxDBuffRD0+0x1>
     a92:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <RxDBuffRD0>
		sei();
     a96:	78 94       	sei
		return c;
     a98:	08 95       	ret
		}
	else 
	return 0;
     a9a:	80 e0       	ldi	r24, 0x00	; 0
}
     a9c:	08 95       	ret

00000a9e <getch0>:
//	Rx Buffer.  The function returns the character count.
// ************************************************

unsigned char  uart0_RxCount(void) {

return(RxDCnt0);
     a9e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <RxDCnt0>
	uart0_putc(c);
	return 0;
}

static int getch0(FILE *stream) {
	while(uart0_RxCount() == 0);
     aa2:	88 23       	and	r24, r24
     aa4:	e1 f3       	breq	.-8      	; 0xa9e <getch0>
	return uart0_getc();
     aa6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <uart0_getc>
}
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	08 95       	ret

00000aae <uart0_putc>:
//	Places a character in the Tx buffer Initiates the transfer and lets the 
//	ISR do the rest.
// *****************************************************

unsigned char  uart0_putc(char  c) {
    if (TxDCnt0<UART_BUF_SIZE) {
     aae:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <TxDCnt0>
     ab2:	90 34       	cpi	r25, 0x40	; 64
     ab4:	38 f5       	brcc	.+78     	; 0xb04 <uart0_putc+0x56>
        cli();
     ab6:	f8 94       	cli
        TxDCnt0++;
     ab8:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <TxDCnt0>
     abc:	9f 5f       	subi	r25, 0xFF	; 255
     abe:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <TxDCnt0>
        *TxDBuffWR0 = c;               		// put character into buffer 
     ac2:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <TxDBuffWR0>
     ac6:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <TxDBuffWR0+0x1>
     aca:	80 83       	st	Z, r24
        if (++TxDBuffWR0 >= TxDBuff0 + UART_BUF_SIZE) 
     acc:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <TxDBuffWR0>
     ad0:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <TxDBuffWR0+0x1>
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	21 e0       	ldi	r18, 0x01	; 1
     ad8:	8e 39       	cpi	r24, 0x9E	; 158
     ada:	92 07       	cpc	r25, r18
     adc:	28 f4       	brcc	.+10     	; 0xae8 <uart0_putc+0x3a>
     ade:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <TxDBuffWR0+0x1>
     ae2:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <TxDBuffWR0>
     ae6:	06 c0       	rjmp	.+12     	; 0xaf4 <uart0_putc+0x46>
													// pointer wrapping 
            TxDBuffWR0 = TxDBuff0;
     ae8:	8e e5       	ldi	r24, 0x5E	; 94
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <TxDBuffWR0+0x1>
     af0:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <TxDBuffWR0>
        UCSR0B|=(1<<UDRIE0);   				// enable UDRIE int 
     af4:	e1 ec       	ldi	r30, 0xC1	; 193
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	80 81       	ld	r24, Z
     afa:	80 62       	ori	r24, 0x20	; 32
     afc:	80 83       	st	Z, r24
        sei();
     afe:	78 94       	sei
        return 1;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	08 95       	ret
    } 
    else 
        return 0;                           // buffer is full 
     b04:	80 e0       	ldi	r24, 0x00	; 0
}
     b06:	08 95       	ret

00000b08 <uart0_RxCount>:
//	Rx Buffer.  The function returns the character count.
// ************************************************

unsigned char  uart0_RxCount(void) {

return(RxDCnt0);
     b08:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <RxDCnt0>

}
     b0c:	08 95       	ret

00000b0e <uart0_write_buff_full>:
// ************************************************
//	Call this function to check for the Tx Buffer is full.  
//	The function returns 1 if full 0 if not..
// ************************************************
unsigned char  uart0_write_buff_full(void) {
if(TxDCnt0 >= UART_BUF_SIZE)
     b0e:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <TxDCnt0>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 34       	cpi	r25, 0x40	; 64
     b16:	08 f4       	brcc	.+2      	; 0xb1a <uart0_write_buff_full+0xc>
     b18:	80 e0       	ldi	r24, 0x00	; 0
	return 1 ;
return 0;
}
     b1a:	08 95       	ret

00000b1c <putch0>:
static int getch0(FILE *stream);

FILE  usart0_Stream = FDEV_SETUP_STREAM(putch0, getch0, _FDEV_SETUP_RW);


static int putch0(char c, FILE *stream) {
     b1c:	cf 93       	push	r28
     b1e:	c8 2f       	mov	r28, r24
	while(uart0_write_buff_full() == 1);
     b20:	0e 94 87 05 	call	0xb0e	; 0xb0e <uart0_write_buff_full>
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	e1 f3       	breq	.-8      	; 0xb20 <putch0+0x4>
	uart0_putc(c);
     b28:	8c 2f       	mov	r24, r28
     b2a:	0e 94 57 05 	call	0xaae	; 0xaae <uart0_putc>
	return 0;
}
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	cf 91       	pop	r28
     b34:	08 95       	ret

00000b36 <__fixunssfsi>:
     b36:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__fp_splitA>
     b3a:	88 f0       	brcs	.+34     	; 0xb5e <__fixunssfsi+0x28>
     b3c:	9f 57       	subi	r25, 0x7F	; 127
     b3e:	98 f0       	brcs	.+38     	; 0xb66 <__fixunssfsi+0x30>
     b40:	b9 2f       	mov	r27, r25
     b42:	99 27       	eor	r25, r25
     b44:	b7 51       	subi	r27, 0x17	; 23
     b46:	b0 f0       	brcs	.+44     	; 0xb74 <__fixunssfsi+0x3e>
     b48:	e1 f0       	breq	.+56     	; 0xb82 <__fixunssfsi+0x4c>
     b4a:	66 0f       	add	r22, r22
     b4c:	77 1f       	adc	r23, r23
     b4e:	88 1f       	adc	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	1a f0       	brmi	.+6      	; 0xb5a <__fixunssfsi+0x24>
     b54:	ba 95       	dec	r27
     b56:	c9 f7       	brne	.-14     	; 0xb4a <__fixunssfsi+0x14>
     b58:	14 c0       	rjmp	.+40     	; 0xb82 <__fixunssfsi+0x4c>
     b5a:	b1 30       	cpi	r27, 0x01	; 1
     b5c:	91 f0       	breq	.+36     	; 0xb82 <__fixunssfsi+0x4c>
     b5e:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_zero>
     b62:	b1 e0       	ldi	r27, 0x01	; 1
     b64:	08 95       	ret
     b66:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_zero>
     b6a:	67 2f       	mov	r22, r23
     b6c:	78 2f       	mov	r23, r24
     b6e:	88 27       	eor	r24, r24
     b70:	b8 5f       	subi	r27, 0xF8	; 248
     b72:	39 f0       	breq	.+14     	; 0xb82 <__fixunssfsi+0x4c>
     b74:	b9 3f       	cpi	r27, 0xF9	; 249
     b76:	cc f3       	brlt	.-14     	; 0xb6a <__fixunssfsi+0x34>
     b78:	86 95       	lsr	r24
     b7a:	77 95       	ror	r23
     b7c:	67 95       	ror	r22
     b7e:	b3 95       	inc	r27
     b80:	d9 f7       	brne	.-10     	; 0xb78 <__fixunssfsi+0x42>
     b82:	3e f4       	brtc	.+14     	; 0xb92 <__fixunssfsi+0x5c>
     b84:	90 95       	com	r25
     b86:	80 95       	com	r24
     b88:	70 95       	com	r23
     b8a:	61 95       	neg	r22
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255
     b8e:	8f 4f       	sbci	r24, 0xFF	; 255
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	08 95       	ret

00000b94 <__floatunsisf>:
     b94:	e8 94       	clt
     b96:	09 c0       	rjmp	.+18     	; 0xbaa <__floatsisf+0x12>

00000b98 <__floatsisf>:
     b98:	97 fb       	bst	r25, 7
     b9a:	3e f4       	brtc	.+14     	; 0xbaa <__floatsisf+0x12>
     b9c:	90 95       	com	r25
     b9e:	80 95       	com	r24
     ba0:	70 95       	com	r23
     ba2:	61 95       	neg	r22
     ba4:	7f 4f       	sbci	r23, 0xFF	; 255
     ba6:	8f 4f       	sbci	r24, 0xFF	; 255
     ba8:	9f 4f       	sbci	r25, 0xFF	; 255
     baa:	99 23       	and	r25, r25
     bac:	a9 f0       	breq	.+42     	; 0xbd8 <__floatsisf+0x40>
     bae:	f9 2f       	mov	r31, r25
     bb0:	96 e9       	ldi	r25, 0x96	; 150
     bb2:	bb 27       	eor	r27, r27
     bb4:	93 95       	inc	r25
     bb6:	f6 95       	lsr	r31
     bb8:	87 95       	ror	r24
     bba:	77 95       	ror	r23
     bbc:	67 95       	ror	r22
     bbe:	b7 95       	ror	r27
     bc0:	f1 11       	cpse	r31, r1
     bc2:	f8 cf       	rjmp	.-16     	; 0xbb4 <__floatsisf+0x1c>
     bc4:	fa f4       	brpl	.+62     	; 0xc04 <__floatsisf+0x6c>
     bc6:	bb 0f       	add	r27, r27
     bc8:	11 f4       	brne	.+4      	; 0xbce <__floatsisf+0x36>
     bca:	60 ff       	sbrs	r22, 0
     bcc:	1b c0       	rjmp	.+54     	; 0xc04 <__floatsisf+0x6c>
     bce:	6f 5f       	subi	r22, 0xFF	; 255
     bd0:	7f 4f       	sbci	r23, 0xFF	; 255
     bd2:	8f 4f       	sbci	r24, 0xFF	; 255
     bd4:	9f 4f       	sbci	r25, 0xFF	; 255
     bd6:	16 c0       	rjmp	.+44     	; 0xc04 <__floatsisf+0x6c>
     bd8:	88 23       	and	r24, r24
     bda:	11 f0       	breq	.+4      	; 0xbe0 <__floatsisf+0x48>
     bdc:	96 e9       	ldi	r25, 0x96	; 150
     bde:	11 c0       	rjmp	.+34     	; 0xc02 <__floatsisf+0x6a>
     be0:	77 23       	and	r23, r23
     be2:	21 f0       	breq	.+8      	; 0xbec <__floatsisf+0x54>
     be4:	9e e8       	ldi	r25, 0x8E	; 142
     be6:	87 2f       	mov	r24, r23
     be8:	76 2f       	mov	r23, r22
     bea:	05 c0       	rjmp	.+10     	; 0xbf6 <__floatsisf+0x5e>
     bec:	66 23       	and	r22, r22
     bee:	71 f0       	breq	.+28     	; 0xc0c <__floatsisf+0x74>
     bf0:	96 e8       	ldi	r25, 0x86	; 134
     bf2:	86 2f       	mov	r24, r22
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	2a f0       	brmi	.+10     	; 0xc04 <__floatsisf+0x6c>
     bfa:	9a 95       	dec	r25
     bfc:	66 0f       	add	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	88 1f       	adc	r24, r24
     c02:	da f7       	brpl	.-10     	; 0xbfa <__floatsisf+0x62>
     c04:	88 0f       	add	r24, r24
     c06:	96 95       	lsr	r25
     c08:	87 95       	ror	r24
     c0a:	97 f9       	bld	r25, 7
     c0c:	08 95       	ret

00000c0e <__fp_split3>:
     c0e:	57 fd       	sbrc	r21, 7
     c10:	90 58       	subi	r25, 0x80	; 128
     c12:	44 0f       	add	r20, r20
     c14:	55 1f       	adc	r21, r21
     c16:	59 f0       	breq	.+22     	; 0xc2e <__fp_splitA+0x10>
     c18:	5f 3f       	cpi	r21, 0xFF	; 255
     c1a:	71 f0       	breq	.+28     	; 0xc38 <__fp_splitA+0x1a>
     c1c:	47 95       	ror	r20

00000c1e <__fp_splitA>:
     c1e:	88 0f       	add	r24, r24
     c20:	97 fb       	bst	r25, 7
     c22:	99 1f       	adc	r25, r25
     c24:	61 f0       	breq	.+24     	; 0xc3e <__fp_splitA+0x20>
     c26:	9f 3f       	cpi	r25, 0xFF	; 255
     c28:	79 f0       	breq	.+30     	; 0xc48 <__fp_splitA+0x2a>
     c2a:	87 95       	ror	r24
     c2c:	08 95       	ret
     c2e:	12 16       	cp	r1, r18
     c30:	13 06       	cpc	r1, r19
     c32:	14 06       	cpc	r1, r20
     c34:	55 1f       	adc	r21, r21
     c36:	f2 cf       	rjmp	.-28     	; 0xc1c <__fp_split3+0xe>
     c38:	46 95       	lsr	r20
     c3a:	f1 df       	rcall	.-30     	; 0xc1e <__fp_splitA>
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <__fp_splitA+0x30>
     c3e:	16 16       	cp	r1, r22
     c40:	17 06       	cpc	r1, r23
     c42:	18 06       	cpc	r1, r24
     c44:	99 1f       	adc	r25, r25
     c46:	f1 cf       	rjmp	.-30     	; 0xc2a <__fp_splitA+0xc>
     c48:	86 95       	lsr	r24
     c4a:	71 05       	cpc	r23, r1
     c4c:	61 05       	cpc	r22, r1
     c4e:	08 94       	sec
     c50:	08 95       	ret

00000c52 <__fp_zero>:
     c52:	e8 94       	clt

00000c54 <__fp_szero>:
     c54:	bb 27       	eor	r27, r27
     c56:	66 27       	eor	r22, r22
     c58:	77 27       	eor	r23, r23
     c5a:	cb 01       	movw	r24, r22
     c5c:	97 f9       	bld	r25, 7
     c5e:	08 95       	ret

00000c60 <__mulsf3>:
     c60:	0e 94 43 06 	call	0xc86	; 0xc86 <__mulsf3x>
     c64:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_round>
     c68:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_pscA>
     c6c:	38 f0       	brcs	.+14     	; 0xc7c <__mulsf3+0x1c>
     c6e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__fp_pscB>
     c72:	20 f0       	brcs	.+8      	; 0xc7c <__mulsf3+0x1c>
     c74:	95 23       	and	r25, r21
     c76:	11 f0       	breq	.+4      	; 0xc7c <__mulsf3+0x1c>
     c78:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_inf>
     c7c:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_nan>
     c80:	11 24       	eor	r1, r1
     c82:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__fp_szero>

00000c86 <__mulsf3x>:
     c86:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fp_split3>
     c8a:	70 f3       	brcs	.-36     	; 0xc68 <__mulsf3+0x8>

00000c8c <__mulsf3_pse>:
     c8c:	95 9f       	mul	r25, r21
     c8e:	c1 f3       	breq	.-16     	; 0xc80 <__mulsf3+0x20>
     c90:	95 0f       	add	r25, r21
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	55 1f       	adc	r21, r21
     c96:	62 9f       	mul	r22, r18
     c98:	f0 01       	movw	r30, r0
     c9a:	72 9f       	mul	r23, r18
     c9c:	bb 27       	eor	r27, r27
     c9e:	f0 0d       	add	r31, r0
     ca0:	b1 1d       	adc	r27, r1
     ca2:	63 9f       	mul	r22, r19
     ca4:	aa 27       	eor	r26, r26
     ca6:	f0 0d       	add	r31, r0
     ca8:	b1 1d       	adc	r27, r1
     caa:	aa 1f       	adc	r26, r26
     cac:	64 9f       	mul	r22, r20
     cae:	66 27       	eor	r22, r22
     cb0:	b0 0d       	add	r27, r0
     cb2:	a1 1d       	adc	r26, r1
     cb4:	66 1f       	adc	r22, r22
     cb6:	82 9f       	mul	r24, r18
     cb8:	22 27       	eor	r18, r18
     cba:	b0 0d       	add	r27, r0
     cbc:	a1 1d       	adc	r26, r1
     cbe:	62 1f       	adc	r22, r18
     cc0:	73 9f       	mul	r23, r19
     cc2:	b0 0d       	add	r27, r0
     cc4:	a1 1d       	adc	r26, r1
     cc6:	62 1f       	adc	r22, r18
     cc8:	83 9f       	mul	r24, r19
     cca:	a0 0d       	add	r26, r0
     ccc:	61 1d       	adc	r22, r1
     cce:	22 1f       	adc	r18, r18
     cd0:	74 9f       	mul	r23, r20
     cd2:	33 27       	eor	r19, r19
     cd4:	a0 0d       	add	r26, r0
     cd6:	61 1d       	adc	r22, r1
     cd8:	23 1f       	adc	r18, r19
     cda:	84 9f       	mul	r24, r20
     cdc:	60 0d       	add	r22, r0
     cde:	21 1d       	adc	r18, r1
     ce0:	82 2f       	mov	r24, r18
     ce2:	76 2f       	mov	r23, r22
     ce4:	6a 2f       	mov	r22, r26
     ce6:	11 24       	eor	r1, r1
     ce8:	9f 57       	subi	r25, 0x7F	; 127
     cea:	50 40       	sbci	r21, 0x00	; 0
     cec:	9a f0       	brmi	.+38     	; 0xd14 <__mulsf3_pse+0x88>
     cee:	f1 f0       	breq	.+60     	; 0xd2c <__mulsf3_pse+0xa0>
     cf0:	88 23       	and	r24, r24
     cf2:	4a f0       	brmi	.+18     	; 0xd06 <__mulsf3_pse+0x7a>
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	bb 1f       	adc	r27, r27
     cfa:	66 1f       	adc	r22, r22
     cfc:	77 1f       	adc	r23, r23
     cfe:	88 1f       	adc	r24, r24
     d00:	91 50       	subi	r25, 0x01	; 1
     d02:	50 40       	sbci	r21, 0x00	; 0
     d04:	a9 f7       	brne	.-22     	; 0xcf0 <__mulsf3_pse+0x64>
     d06:	9e 3f       	cpi	r25, 0xFE	; 254
     d08:	51 05       	cpc	r21, r1
     d0a:	80 f0       	brcs	.+32     	; 0xd2c <__mulsf3_pse+0xa0>
     d0c:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_inf>
     d10:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__fp_szero>
     d14:	5f 3f       	cpi	r21, 0xFF	; 255
     d16:	e4 f3       	brlt	.-8      	; 0xd10 <__mulsf3_pse+0x84>
     d18:	98 3e       	cpi	r25, 0xE8	; 232
     d1a:	d4 f3       	brlt	.-12     	; 0xd10 <__mulsf3_pse+0x84>
     d1c:	86 95       	lsr	r24
     d1e:	77 95       	ror	r23
     d20:	67 95       	ror	r22
     d22:	b7 95       	ror	r27
     d24:	f7 95       	ror	r31
     d26:	e7 95       	ror	r30
     d28:	9f 5f       	subi	r25, 0xFF	; 255
     d2a:	c1 f7       	brne	.-16     	; 0xd1c <__mulsf3_pse+0x90>
     d2c:	fe 2b       	or	r31, r30
     d2e:	88 0f       	add	r24, r24
     d30:	91 1d       	adc	r25, r1
     d32:	96 95       	lsr	r25
     d34:	87 95       	ror	r24
     d36:	97 f9       	bld	r25, 7
     d38:	08 95       	ret

00000d3a <__fp_inf>:
     d3a:	97 f9       	bld	r25, 7
     d3c:	9f 67       	ori	r25, 0x7F	; 127
     d3e:	80 e8       	ldi	r24, 0x80	; 128
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	08 95       	ret

00000d46 <__fp_nan>:
     d46:	9f ef       	ldi	r25, 0xFF	; 255
     d48:	80 ec       	ldi	r24, 0xC0	; 192
     d4a:	08 95       	ret

00000d4c <__fp_pscA>:
     d4c:	00 24       	eor	r0, r0
     d4e:	0a 94       	dec	r0
     d50:	16 16       	cp	r1, r22
     d52:	17 06       	cpc	r1, r23
     d54:	18 06       	cpc	r1, r24
     d56:	09 06       	cpc	r0, r25
     d58:	08 95       	ret

00000d5a <__fp_pscB>:
     d5a:	00 24       	eor	r0, r0
     d5c:	0a 94       	dec	r0
     d5e:	12 16       	cp	r1, r18
     d60:	13 06       	cpc	r1, r19
     d62:	14 06       	cpc	r1, r20
     d64:	05 06       	cpc	r0, r21
     d66:	08 95       	ret

00000d68 <__fp_round>:
     d68:	09 2e       	mov	r0, r25
     d6a:	03 94       	inc	r0
     d6c:	00 0c       	add	r0, r0
     d6e:	11 f4       	brne	.+4      	; 0xd74 <__fp_round+0xc>
     d70:	88 23       	and	r24, r24
     d72:	52 f0       	brmi	.+20     	; 0xd88 <__fp_round+0x20>
     d74:	bb 0f       	add	r27, r27
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fp_round+0x20>
     d78:	bf 2b       	or	r27, r31
     d7a:	11 f4       	brne	.+4      	; 0xd80 <__fp_round+0x18>
     d7c:	60 ff       	sbrs	r22, 0
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <__fp_round+0x20>
     d80:	6f 5f       	subi	r22, 0xFF	; 255
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	8f 4f       	sbci	r24, 0xFF	; 255
     d86:	9f 4f       	sbci	r25, 0xFF	; 255
     d88:	08 95       	ret

00000d8a <__udivmodsi4>:
     d8a:	a1 e2       	ldi	r26, 0x21	; 33
     d8c:	1a 2e       	mov	r1, r26
     d8e:	aa 1b       	sub	r26, r26
     d90:	bb 1b       	sub	r27, r27
     d92:	fd 01       	movw	r30, r26
     d94:	0d c0       	rjmp	.+26     	; 0xdb0 <__udivmodsi4_ep>

00000d96 <__udivmodsi4_loop>:
     d96:	aa 1f       	adc	r26, r26
     d98:	bb 1f       	adc	r27, r27
     d9a:	ee 1f       	adc	r30, r30
     d9c:	ff 1f       	adc	r31, r31
     d9e:	a2 17       	cp	r26, r18
     da0:	b3 07       	cpc	r27, r19
     da2:	e4 07       	cpc	r30, r20
     da4:	f5 07       	cpc	r31, r21
     da6:	20 f0       	brcs	.+8      	; 0xdb0 <__udivmodsi4_ep>
     da8:	a2 1b       	sub	r26, r18
     daa:	b3 0b       	sbc	r27, r19
     dac:	e4 0b       	sbc	r30, r20
     dae:	f5 0b       	sbc	r31, r21

00000db0 <__udivmodsi4_ep>:
     db0:	66 1f       	adc	r22, r22
     db2:	77 1f       	adc	r23, r23
     db4:	88 1f       	adc	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	1a 94       	dec	r1
     dba:	69 f7       	brne	.-38     	; 0xd96 <__udivmodsi4_loop>
     dbc:	60 95       	com	r22
     dbe:	70 95       	com	r23
     dc0:	80 95       	com	r24
     dc2:	90 95       	com	r25
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	bd 01       	movw	r22, r26
     dca:	cf 01       	movw	r24, r30
     dcc:	08 95       	ret

00000dce <fprintf_P>:
     dce:	a0 e0       	ldi	r26, 0x00	; 0
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	ed ee       	ldi	r30, 0xED	; 237
     dd4:	f6 e0       	ldi	r31, 0x06	; 6
     dd6:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__prologue_saves__+0x1c>
     dda:	0f 81       	ldd	r16, Y+7	; 0x07
     ddc:	18 85       	ldd	r17, Y+8	; 0x08
     dde:	f8 01       	movw	r30, r16
     de0:	83 81       	ldd	r24, Z+3	; 0x03
     de2:	88 60       	ori	r24, 0x08	; 8
     de4:	83 83       	std	Z+3, r24	; 0x03
     de6:	ae 01       	movw	r20, r28
     de8:	45 5f       	subi	r20, 0xF5	; 245
     dea:	5f 4f       	sbci	r21, 0xFF	; 255
     dec:	69 85       	ldd	r22, Y+9	; 0x09
     dee:	7a 85       	ldd	r23, Y+10	; 0x0a
     df0:	c8 01       	movw	r24, r16
     df2:	0e 94 02 07 	call	0xe04	; 0xe04 <vfprintf>
     df6:	f8 01       	movw	r30, r16
     df8:	23 81       	ldd	r18, Z+3	; 0x03
     dfa:	27 7f       	andi	r18, 0xF7	; 247
     dfc:	23 83       	std	Z+3, r18	; 0x03
     dfe:	e4 e0       	ldi	r30, 0x04	; 4
     e00:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__epilogue_restores__+0x1c>

00000e04 <vfprintf>:
     e04:	ab e0       	ldi	r26, 0x0B	; 11
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e8 e0       	ldi	r30, 0x08	; 8
     e0a:	f7 e0       	ldi	r31, 0x07	; 7
     e0c:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__prologue_saves__>
     e10:	6c 01       	movw	r12, r24
     e12:	7b 01       	movw	r14, r22
     e14:	8a 01       	movw	r16, r20
     e16:	fc 01       	movw	r30, r24
     e18:	17 82       	std	Z+7, r1	; 0x07
     e1a:	16 82       	std	Z+6, r1	; 0x06
     e1c:	83 81       	ldd	r24, Z+3	; 0x03
     e1e:	81 ff       	sbrs	r24, 1
     e20:	cc c1       	rjmp	.+920    	; 0x11ba <vfprintf+0x3b6>
     e22:	ce 01       	movw	r24, r28
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	3c 01       	movw	r6, r24
     e28:	f6 01       	movw	r30, r12
     e2a:	93 81       	ldd	r25, Z+3	; 0x03
     e2c:	f7 01       	movw	r30, r14
     e2e:	93 fd       	sbrc	r25, 3
     e30:	85 91       	lpm	r24, Z+
     e32:	93 ff       	sbrs	r25, 3
     e34:	81 91       	ld	r24, Z+
     e36:	7f 01       	movw	r14, r30
     e38:	88 23       	and	r24, r24
     e3a:	09 f4       	brne	.+2      	; 0xe3e <vfprintf+0x3a>
     e3c:	ba c1       	rjmp	.+884    	; 0x11b2 <vfprintf+0x3ae>
     e3e:	85 32       	cpi	r24, 0x25	; 37
     e40:	39 f4       	brne	.+14     	; 0xe50 <vfprintf+0x4c>
     e42:	93 fd       	sbrc	r25, 3
     e44:	85 91       	lpm	r24, Z+
     e46:	93 ff       	sbrs	r25, 3
     e48:	81 91       	ld	r24, Z+
     e4a:	7f 01       	movw	r14, r30
     e4c:	85 32       	cpi	r24, 0x25	; 37
     e4e:	29 f4       	brne	.+10     	; 0xe5a <vfprintf+0x56>
     e50:	b6 01       	movw	r22, r12
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <fputc>
     e58:	e7 cf       	rjmp	.-50     	; 0xe28 <vfprintf+0x24>
     e5a:	91 2c       	mov	r9, r1
     e5c:	21 2c       	mov	r2, r1
     e5e:	31 2c       	mov	r3, r1
     e60:	ff e1       	ldi	r31, 0x1F	; 31
     e62:	f3 15       	cp	r31, r3
     e64:	d8 f0       	brcs	.+54     	; 0xe9c <vfprintf+0x98>
     e66:	8b 32       	cpi	r24, 0x2B	; 43
     e68:	79 f0       	breq	.+30     	; 0xe88 <vfprintf+0x84>
     e6a:	38 f4       	brcc	.+14     	; 0xe7a <vfprintf+0x76>
     e6c:	80 32       	cpi	r24, 0x20	; 32
     e6e:	79 f0       	breq	.+30     	; 0xe8e <vfprintf+0x8a>
     e70:	83 32       	cpi	r24, 0x23	; 35
     e72:	a1 f4       	brne	.+40     	; 0xe9c <vfprintf+0x98>
     e74:	23 2d       	mov	r18, r3
     e76:	20 61       	ori	r18, 0x10	; 16
     e78:	1d c0       	rjmp	.+58     	; 0xeb4 <vfprintf+0xb0>
     e7a:	8d 32       	cpi	r24, 0x2D	; 45
     e7c:	61 f0       	breq	.+24     	; 0xe96 <vfprintf+0x92>
     e7e:	80 33       	cpi	r24, 0x30	; 48
     e80:	69 f4       	brne	.+26     	; 0xe9c <vfprintf+0x98>
     e82:	23 2d       	mov	r18, r3
     e84:	21 60       	ori	r18, 0x01	; 1
     e86:	16 c0       	rjmp	.+44     	; 0xeb4 <vfprintf+0xb0>
     e88:	83 2d       	mov	r24, r3
     e8a:	82 60       	ori	r24, 0x02	; 2
     e8c:	38 2e       	mov	r3, r24
     e8e:	e3 2d       	mov	r30, r3
     e90:	e4 60       	ori	r30, 0x04	; 4
     e92:	3e 2e       	mov	r3, r30
     e94:	2a c0       	rjmp	.+84     	; 0xeea <vfprintf+0xe6>
     e96:	f3 2d       	mov	r31, r3
     e98:	f8 60       	ori	r31, 0x08	; 8
     e9a:	1d c0       	rjmp	.+58     	; 0xed6 <vfprintf+0xd2>
     e9c:	37 fc       	sbrc	r3, 7
     e9e:	2d c0       	rjmp	.+90     	; 0xefa <vfprintf+0xf6>
     ea0:	20 ed       	ldi	r18, 0xD0	; 208
     ea2:	28 0f       	add	r18, r24
     ea4:	2a 30       	cpi	r18, 0x0A	; 10
     ea6:	40 f0       	brcs	.+16     	; 0xeb8 <vfprintf+0xb4>
     ea8:	8e 32       	cpi	r24, 0x2E	; 46
     eaa:	b9 f4       	brne	.+46     	; 0xeda <vfprintf+0xd6>
     eac:	36 fc       	sbrc	r3, 6
     eae:	81 c1       	rjmp	.+770    	; 0x11b2 <vfprintf+0x3ae>
     eb0:	23 2d       	mov	r18, r3
     eb2:	20 64       	ori	r18, 0x40	; 64
     eb4:	32 2e       	mov	r3, r18
     eb6:	19 c0       	rjmp	.+50     	; 0xeea <vfprintf+0xe6>
     eb8:	36 fe       	sbrs	r3, 6
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <vfprintf+0xc4>
     ebc:	8a e0       	ldi	r24, 0x0A	; 10
     ebe:	98 9e       	mul	r9, r24
     ec0:	20 0d       	add	r18, r0
     ec2:	11 24       	eor	r1, r1
     ec4:	92 2e       	mov	r9, r18
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <vfprintf+0xe6>
     ec8:	ea e0       	ldi	r30, 0x0A	; 10
     eca:	2e 9e       	mul	r2, r30
     ecc:	20 0d       	add	r18, r0
     ece:	11 24       	eor	r1, r1
     ed0:	22 2e       	mov	r2, r18
     ed2:	f3 2d       	mov	r31, r3
     ed4:	f0 62       	ori	r31, 0x20	; 32
     ed6:	3f 2e       	mov	r3, r31
     ed8:	08 c0       	rjmp	.+16     	; 0xeea <vfprintf+0xe6>
     eda:	8c 36       	cpi	r24, 0x6C	; 108
     edc:	21 f4       	brne	.+8      	; 0xee6 <vfprintf+0xe2>
     ede:	83 2d       	mov	r24, r3
     ee0:	80 68       	ori	r24, 0x80	; 128
     ee2:	38 2e       	mov	r3, r24
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <vfprintf+0xe6>
     ee6:	88 36       	cpi	r24, 0x68	; 104
     ee8:	41 f4       	brne	.+16     	; 0xefa <vfprintf+0xf6>
     eea:	f7 01       	movw	r30, r14
     eec:	93 fd       	sbrc	r25, 3
     eee:	85 91       	lpm	r24, Z+
     ef0:	93 ff       	sbrs	r25, 3
     ef2:	81 91       	ld	r24, Z+
     ef4:	7f 01       	movw	r14, r30
     ef6:	81 11       	cpse	r24, r1
     ef8:	b3 cf       	rjmp	.-154    	; 0xe60 <vfprintf+0x5c>
     efa:	98 2f       	mov	r25, r24
     efc:	9f 7d       	andi	r25, 0xDF	; 223
     efe:	95 54       	subi	r25, 0x45	; 69
     f00:	93 30       	cpi	r25, 0x03	; 3
     f02:	28 f4       	brcc	.+10     	; 0xf0e <vfprintf+0x10a>
     f04:	0c 5f       	subi	r16, 0xFC	; 252
     f06:	1f 4f       	sbci	r17, 0xFF	; 255
     f08:	9f e3       	ldi	r25, 0x3F	; 63
     f0a:	99 83       	std	Y+1, r25	; 0x01
     f0c:	0d c0       	rjmp	.+26     	; 0xf28 <vfprintf+0x124>
     f0e:	83 36       	cpi	r24, 0x63	; 99
     f10:	31 f0       	breq	.+12     	; 0xf1e <vfprintf+0x11a>
     f12:	83 37       	cpi	r24, 0x73	; 115
     f14:	71 f0       	breq	.+28     	; 0xf32 <vfprintf+0x12e>
     f16:	83 35       	cpi	r24, 0x53	; 83
     f18:	09 f0       	breq	.+2      	; 0xf1c <vfprintf+0x118>
     f1a:	59 c0       	rjmp	.+178    	; 0xfce <vfprintf+0x1ca>
     f1c:	21 c0       	rjmp	.+66     	; 0xf60 <vfprintf+0x15c>
     f1e:	f8 01       	movw	r30, r16
     f20:	80 81       	ld	r24, Z
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	0e 5f       	subi	r16, 0xFE	; 254
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
     f28:	88 24       	eor	r8, r8
     f2a:	83 94       	inc	r8
     f2c:	91 2c       	mov	r9, r1
     f2e:	53 01       	movw	r10, r6
     f30:	13 c0       	rjmp	.+38     	; 0xf58 <vfprintf+0x154>
     f32:	28 01       	movw	r4, r16
     f34:	f2 e0       	ldi	r31, 0x02	; 2
     f36:	4f 0e       	add	r4, r31
     f38:	51 1c       	adc	r5, r1
     f3a:	f8 01       	movw	r30, r16
     f3c:	a0 80       	ld	r10, Z
     f3e:	b1 80       	ldd	r11, Z+1	; 0x01
     f40:	36 fe       	sbrs	r3, 6
     f42:	03 c0       	rjmp	.+6      	; 0xf4a <vfprintf+0x146>
     f44:	69 2d       	mov	r22, r9
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <vfprintf+0x14a>
     f4a:	6f ef       	ldi	r22, 0xFF	; 255
     f4c:	7f ef       	ldi	r23, 0xFF	; 255
     f4e:	c5 01       	movw	r24, r10
     f50:	0e 94 ee 08 	call	0x11dc	; 0x11dc <strnlen>
     f54:	4c 01       	movw	r8, r24
     f56:	82 01       	movw	r16, r4
     f58:	f3 2d       	mov	r31, r3
     f5a:	ff 77       	andi	r31, 0x7F	; 127
     f5c:	3f 2e       	mov	r3, r31
     f5e:	16 c0       	rjmp	.+44     	; 0xf8c <vfprintf+0x188>
     f60:	28 01       	movw	r4, r16
     f62:	22 e0       	ldi	r18, 0x02	; 2
     f64:	42 0e       	add	r4, r18
     f66:	51 1c       	adc	r5, r1
     f68:	f8 01       	movw	r30, r16
     f6a:	a0 80       	ld	r10, Z
     f6c:	b1 80       	ldd	r11, Z+1	; 0x01
     f6e:	36 fe       	sbrs	r3, 6
     f70:	03 c0       	rjmp	.+6      	; 0xf78 <vfprintf+0x174>
     f72:	69 2d       	mov	r22, r9
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <vfprintf+0x178>
     f78:	6f ef       	ldi	r22, 0xFF	; 255
     f7a:	7f ef       	ldi	r23, 0xFF	; 255
     f7c:	c5 01       	movw	r24, r10
     f7e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <strnlen_P>
     f82:	4c 01       	movw	r8, r24
     f84:	f3 2d       	mov	r31, r3
     f86:	f0 68       	ori	r31, 0x80	; 128
     f88:	3f 2e       	mov	r3, r31
     f8a:	82 01       	movw	r16, r4
     f8c:	33 fc       	sbrc	r3, 3
     f8e:	1b c0       	rjmp	.+54     	; 0xfc6 <vfprintf+0x1c2>
     f90:	82 2d       	mov	r24, r2
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	88 16       	cp	r8, r24
     f96:	99 06       	cpc	r9, r25
     f98:	b0 f4       	brcc	.+44     	; 0xfc6 <vfprintf+0x1c2>
     f9a:	b6 01       	movw	r22, r12
     f9c:	80 e2       	ldi	r24, 0x20	; 32
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <fputc>
     fa4:	2a 94       	dec	r2
     fa6:	f4 cf       	rjmp	.-24     	; 0xf90 <vfprintf+0x18c>
     fa8:	f5 01       	movw	r30, r10
     faa:	37 fc       	sbrc	r3, 7
     fac:	85 91       	lpm	r24, Z+
     fae:	37 fe       	sbrs	r3, 7
     fb0:	81 91       	ld	r24, Z+
     fb2:	5f 01       	movw	r10, r30
     fb4:	b6 01       	movw	r22, r12
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <fputc>
     fbc:	21 10       	cpse	r2, r1
     fbe:	2a 94       	dec	r2
     fc0:	21 e0       	ldi	r18, 0x01	; 1
     fc2:	82 1a       	sub	r8, r18
     fc4:	91 08       	sbc	r9, r1
     fc6:	81 14       	cp	r8, r1
     fc8:	91 04       	cpc	r9, r1
     fca:	71 f7       	brne	.-36     	; 0xfa8 <vfprintf+0x1a4>
     fcc:	e8 c0       	rjmp	.+464    	; 0x119e <vfprintf+0x39a>
     fce:	84 36       	cpi	r24, 0x64	; 100
     fd0:	11 f0       	breq	.+4      	; 0xfd6 <vfprintf+0x1d2>
     fd2:	89 36       	cpi	r24, 0x69	; 105
     fd4:	41 f5       	brne	.+80     	; 0x1026 <vfprintf+0x222>
     fd6:	f8 01       	movw	r30, r16
     fd8:	37 fe       	sbrs	r3, 7
     fda:	07 c0       	rjmp	.+14     	; 0xfea <vfprintf+0x1e6>
     fdc:	60 81       	ld	r22, Z
     fde:	71 81       	ldd	r23, Z+1	; 0x01
     fe0:	82 81       	ldd	r24, Z+2	; 0x02
     fe2:	93 81       	ldd	r25, Z+3	; 0x03
     fe4:	0c 5f       	subi	r16, 0xFC	; 252
     fe6:	1f 4f       	sbci	r17, 0xFF	; 255
     fe8:	08 c0       	rjmp	.+16     	; 0xffa <vfprintf+0x1f6>
     fea:	60 81       	ld	r22, Z
     fec:	71 81       	ldd	r23, Z+1	; 0x01
     fee:	07 2e       	mov	r0, r23
     ff0:	00 0c       	add	r0, r0
     ff2:	88 0b       	sbc	r24, r24
     ff4:	99 0b       	sbc	r25, r25
     ff6:	0e 5f       	subi	r16, 0xFE	; 254
     ff8:	1f 4f       	sbci	r17, 0xFF	; 255
     ffa:	f3 2d       	mov	r31, r3
     ffc:	ff 76       	andi	r31, 0x6F	; 111
     ffe:	3f 2e       	mov	r3, r31
    1000:	97 ff       	sbrs	r25, 7
    1002:	09 c0       	rjmp	.+18     	; 0x1016 <vfprintf+0x212>
    1004:	90 95       	com	r25
    1006:	80 95       	com	r24
    1008:	70 95       	com	r23
    100a:	61 95       	neg	r22
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	8f 4f       	sbci	r24, 0xFF	; 255
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	f0 68       	ori	r31, 0x80	; 128
    1014:	3f 2e       	mov	r3, r31
    1016:	2a e0       	ldi	r18, 0x0A	; 10
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	a3 01       	movw	r20, r6
    101c:	0e 94 35 09 	call	0x126a	; 0x126a <__ultoa_invert>
    1020:	88 2e       	mov	r8, r24
    1022:	86 18       	sub	r8, r6
    1024:	45 c0       	rjmp	.+138    	; 0x10b0 <vfprintf+0x2ac>
    1026:	85 37       	cpi	r24, 0x75	; 117
    1028:	31 f4       	brne	.+12     	; 0x1036 <vfprintf+0x232>
    102a:	23 2d       	mov	r18, r3
    102c:	2f 7e       	andi	r18, 0xEF	; 239
    102e:	b2 2e       	mov	r11, r18
    1030:	2a e0       	ldi	r18, 0x0A	; 10
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	25 c0       	rjmp	.+74     	; 0x1080 <vfprintf+0x27c>
    1036:	93 2d       	mov	r25, r3
    1038:	99 7f       	andi	r25, 0xF9	; 249
    103a:	b9 2e       	mov	r11, r25
    103c:	8f 36       	cpi	r24, 0x6F	; 111
    103e:	c1 f0       	breq	.+48     	; 0x1070 <vfprintf+0x26c>
    1040:	18 f4       	brcc	.+6      	; 0x1048 <vfprintf+0x244>
    1042:	88 35       	cpi	r24, 0x58	; 88
    1044:	79 f0       	breq	.+30     	; 0x1064 <vfprintf+0x260>
    1046:	b5 c0       	rjmp	.+362    	; 0x11b2 <vfprintf+0x3ae>
    1048:	80 37       	cpi	r24, 0x70	; 112
    104a:	19 f0       	breq	.+6      	; 0x1052 <vfprintf+0x24e>
    104c:	88 37       	cpi	r24, 0x78	; 120
    104e:	21 f0       	breq	.+8      	; 0x1058 <vfprintf+0x254>
    1050:	b0 c0       	rjmp	.+352    	; 0x11b2 <vfprintf+0x3ae>
    1052:	e9 2f       	mov	r30, r25
    1054:	e0 61       	ori	r30, 0x10	; 16
    1056:	be 2e       	mov	r11, r30
    1058:	b4 fe       	sbrs	r11, 4
    105a:	0d c0       	rjmp	.+26     	; 0x1076 <vfprintf+0x272>
    105c:	fb 2d       	mov	r31, r11
    105e:	f4 60       	ori	r31, 0x04	; 4
    1060:	bf 2e       	mov	r11, r31
    1062:	09 c0       	rjmp	.+18     	; 0x1076 <vfprintf+0x272>
    1064:	34 fe       	sbrs	r3, 4
    1066:	0a c0       	rjmp	.+20     	; 0x107c <vfprintf+0x278>
    1068:	29 2f       	mov	r18, r25
    106a:	26 60       	ori	r18, 0x06	; 6
    106c:	b2 2e       	mov	r11, r18
    106e:	06 c0       	rjmp	.+12     	; 0x107c <vfprintf+0x278>
    1070:	28 e0       	ldi	r18, 0x08	; 8
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <vfprintf+0x27c>
    1076:	20 e1       	ldi	r18, 0x10	; 16
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <vfprintf+0x27c>
    107c:	20 e1       	ldi	r18, 0x10	; 16
    107e:	32 e0       	ldi	r19, 0x02	; 2
    1080:	f8 01       	movw	r30, r16
    1082:	b7 fe       	sbrs	r11, 7
    1084:	07 c0       	rjmp	.+14     	; 0x1094 <vfprintf+0x290>
    1086:	60 81       	ld	r22, Z
    1088:	71 81       	ldd	r23, Z+1	; 0x01
    108a:	82 81       	ldd	r24, Z+2	; 0x02
    108c:	93 81       	ldd	r25, Z+3	; 0x03
    108e:	0c 5f       	subi	r16, 0xFC	; 252
    1090:	1f 4f       	sbci	r17, 0xFF	; 255
    1092:	06 c0       	rjmp	.+12     	; 0x10a0 <vfprintf+0x29c>
    1094:	60 81       	ld	r22, Z
    1096:	71 81       	ldd	r23, Z+1	; 0x01
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 5f       	subi	r16, 0xFE	; 254
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
    10a0:	a3 01       	movw	r20, r6
    10a2:	0e 94 35 09 	call	0x126a	; 0x126a <__ultoa_invert>
    10a6:	88 2e       	mov	r8, r24
    10a8:	86 18       	sub	r8, r6
    10aa:	fb 2d       	mov	r31, r11
    10ac:	ff 77       	andi	r31, 0x7F	; 127
    10ae:	3f 2e       	mov	r3, r31
    10b0:	36 fe       	sbrs	r3, 6
    10b2:	0d c0       	rjmp	.+26     	; 0x10ce <vfprintf+0x2ca>
    10b4:	23 2d       	mov	r18, r3
    10b6:	2e 7f       	andi	r18, 0xFE	; 254
    10b8:	a2 2e       	mov	r10, r18
    10ba:	89 14       	cp	r8, r9
    10bc:	58 f4       	brcc	.+22     	; 0x10d4 <vfprintf+0x2d0>
    10be:	34 fe       	sbrs	r3, 4
    10c0:	0b c0       	rjmp	.+22     	; 0x10d8 <vfprintf+0x2d4>
    10c2:	32 fc       	sbrc	r3, 2
    10c4:	09 c0       	rjmp	.+18     	; 0x10d8 <vfprintf+0x2d4>
    10c6:	83 2d       	mov	r24, r3
    10c8:	8e 7e       	andi	r24, 0xEE	; 238
    10ca:	a8 2e       	mov	r10, r24
    10cc:	05 c0       	rjmp	.+10     	; 0x10d8 <vfprintf+0x2d4>
    10ce:	b8 2c       	mov	r11, r8
    10d0:	a3 2c       	mov	r10, r3
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <vfprintf+0x2d6>
    10d4:	b8 2c       	mov	r11, r8
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <vfprintf+0x2d6>
    10d8:	b9 2c       	mov	r11, r9
    10da:	a4 fe       	sbrs	r10, 4
    10dc:	0f c0       	rjmp	.+30     	; 0x10fc <vfprintf+0x2f8>
    10de:	fe 01       	movw	r30, r28
    10e0:	e8 0d       	add	r30, r8
    10e2:	f1 1d       	adc	r31, r1
    10e4:	80 81       	ld	r24, Z
    10e6:	80 33       	cpi	r24, 0x30	; 48
    10e8:	21 f4       	brne	.+8      	; 0x10f2 <vfprintf+0x2ee>
    10ea:	9a 2d       	mov	r25, r10
    10ec:	99 7e       	andi	r25, 0xE9	; 233
    10ee:	a9 2e       	mov	r10, r25
    10f0:	09 c0       	rjmp	.+18     	; 0x1104 <vfprintf+0x300>
    10f2:	a2 fe       	sbrs	r10, 2
    10f4:	06 c0       	rjmp	.+12     	; 0x1102 <vfprintf+0x2fe>
    10f6:	b3 94       	inc	r11
    10f8:	b3 94       	inc	r11
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <vfprintf+0x300>
    10fc:	8a 2d       	mov	r24, r10
    10fe:	86 78       	andi	r24, 0x86	; 134
    1100:	09 f0       	breq	.+2      	; 0x1104 <vfprintf+0x300>
    1102:	b3 94       	inc	r11
    1104:	a3 fc       	sbrc	r10, 3
    1106:	11 c0       	rjmp	.+34     	; 0x112a <vfprintf+0x326>
    1108:	a0 fe       	sbrs	r10, 0
    110a:	06 c0       	rjmp	.+12     	; 0x1118 <vfprintf+0x314>
    110c:	b2 14       	cp	r11, r2
    110e:	88 f4       	brcc	.+34     	; 0x1132 <vfprintf+0x32e>
    1110:	28 0c       	add	r2, r8
    1112:	92 2c       	mov	r9, r2
    1114:	9b 18       	sub	r9, r11
    1116:	0e c0       	rjmp	.+28     	; 0x1134 <vfprintf+0x330>
    1118:	b2 14       	cp	r11, r2
    111a:	60 f4       	brcc	.+24     	; 0x1134 <vfprintf+0x330>
    111c:	b6 01       	movw	r22, r12
    111e:	80 e2       	ldi	r24, 0x20	; 32
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <fputc>
    1126:	b3 94       	inc	r11
    1128:	f7 cf       	rjmp	.-18     	; 0x1118 <vfprintf+0x314>
    112a:	b2 14       	cp	r11, r2
    112c:	18 f4       	brcc	.+6      	; 0x1134 <vfprintf+0x330>
    112e:	2b 18       	sub	r2, r11
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <vfprintf+0x332>
    1132:	98 2c       	mov	r9, r8
    1134:	21 2c       	mov	r2, r1
    1136:	a4 fe       	sbrs	r10, 4
    1138:	10 c0       	rjmp	.+32     	; 0x115a <vfprintf+0x356>
    113a:	b6 01       	movw	r22, r12
    113c:	80 e3       	ldi	r24, 0x30	; 48
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <fputc>
    1144:	a2 fe       	sbrs	r10, 2
    1146:	17 c0       	rjmp	.+46     	; 0x1176 <vfprintf+0x372>
    1148:	a1 fc       	sbrc	r10, 1
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <vfprintf+0x34e>
    114c:	88 e7       	ldi	r24, 0x78	; 120
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <vfprintf+0x352>
    1152:	88 e5       	ldi	r24, 0x58	; 88
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	b6 01       	movw	r22, r12
    1158:	0c c0       	rjmp	.+24     	; 0x1172 <vfprintf+0x36e>
    115a:	8a 2d       	mov	r24, r10
    115c:	86 78       	andi	r24, 0x86	; 134
    115e:	59 f0       	breq	.+22     	; 0x1176 <vfprintf+0x372>
    1160:	a1 fe       	sbrs	r10, 1
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <vfprintf+0x364>
    1164:	8b e2       	ldi	r24, 0x2B	; 43
    1166:	01 c0       	rjmp	.+2      	; 0x116a <vfprintf+0x366>
    1168:	80 e2       	ldi	r24, 0x20	; 32
    116a:	a7 fc       	sbrc	r10, 7
    116c:	8d e2       	ldi	r24, 0x2D	; 45
    116e:	b6 01       	movw	r22, r12
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <fputc>
    1176:	89 14       	cp	r8, r9
    1178:	38 f4       	brcc	.+14     	; 0x1188 <vfprintf+0x384>
    117a:	b6 01       	movw	r22, r12
    117c:	80 e3       	ldi	r24, 0x30	; 48
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <fputc>
    1184:	9a 94       	dec	r9
    1186:	f7 cf       	rjmp	.-18     	; 0x1176 <vfprintf+0x372>
    1188:	8a 94       	dec	r8
    118a:	f3 01       	movw	r30, r6
    118c:	e8 0d       	add	r30, r8
    118e:	f1 1d       	adc	r31, r1
    1190:	80 81       	ld	r24, Z
    1192:	b6 01       	movw	r22, r12
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <fputc>
    119a:	81 10       	cpse	r8, r1
    119c:	f5 cf       	rjmp	.-22     	; 0x1188 <vfprintf+0x384>
    119e:	22 20       	and	r2, r2
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <vfprintf+0x3a0>
    11a2:	42 ce       	rjmp	.-892    	; 0xe28 <vfprintf+0x24>
    11a4:	b6 01       	movw	r22, r12
    11a6:	80 e2       	ldi	r24, 0x20	; 32
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <fputc>
    11ae:	2a 94       	dec	r2
    11b0:	f6 cf       	rjmp	.-20     	; 0x119e <vfprintf+0x39a>
    11b2:	f6 01       	movw	r30, r12
    11b4:	86 81       	ldd	r24, Z+6	; 0x06
    11b6:	97 81       	ldd	r25, Z+7	; 0x07
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <vfprintf+0x3ba>
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	9f ef       	ldi	r25, 0xFF	; 255
    11be:	2b 96       	adiw	r28, 0x0b	; 11
    11c0:	e2 e1       	ldi	r30, 0x12	; 18
    11c2:	0c 94 af 09 	jmp	0x135e	; 0x135e <__epilogue_restores__>

000011c6 <strnlen_P>:
    11c6:	fc 01       	movw	r30, r24
    11c8:	05 90       	lpm	r0, Z+
    11ca:	61 50       	subi	r22, 0x01	; 1
    11cc:	70 40       	sbci	r23, 0x00	; 0
    11ce:	01 10       	cpse	r0, r1
    11d0:	d8 f7       	brcc	.-10     	; 0x11c8 <strnlen_P+0x2>
    11d2:	80 95       	com	r24
    11d4:	90 95       	com	r25
    11d6:	8e 0f       	add	r24, r30
    11d8:	9f 1f       	adc	r25, r31
    11da:	08 95       	ret

000011dc <strnlen>:
    11dc:	fc 01       	movw	r30, r24
    11de:	61 50       	subi	r22, 0x01	; 1
    11e0:	70 40       	sbci	r23, 0x00	; 0
    11e2:	01 90       	ld	r0, Z+
    11e4:	01 10       	cpse	r0, r1
    11e6:	d8 f7       	brcc	.-10     	; 0x11de <strnlen+0x2>
    11e8:	80 95       	com	r24
    11ea:	90 95       	com	r25
    11ec:	8e 0f       	add	r24, r30
    11ee:	9f 1f       	adc	r25, r31
    11f0:	08 95       	ret

000011f2 <fputc>:
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	fb 01       	movw	r30, r22
    11fc:	23 81       	ldd	r18, Z+3	; 0x03
    11fe:	21 fd       	sbrc	r18, 1
    1200:	03 c0       	rjmp	.+6      	; 0x1208 <fputc+0x16>
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	9f ef       	ldi	r25, 0xFF	; 255
    1206:	2c c0       	rjmp	.+88     	; 0x1260 <fputc+0x6e>
    1208:	22 ff       	sbrs	r18, 2
    120a:	16 c0       	rjmp	.+44     	; 0x1238 <fputc+0x46>
    120c:	46 81       	ldd	r20, Z+6	; 0x06
    120e:	57 81       	ldd	r21, Z+7	; 0x07
    1210:	24 81       	ldd	r18, Z+4	; 0x04
    1212:	35 81       	ldd	r19, Z+5	; 0x05
    1214:	42 17       	cp	r20, r18
    1216:	53 07       	cpc	r21, r19
    1218:	44 f4       	brge	.+16     	; 0x122a <fputc+0x38>
    121a:	a0 81       	ld	r26, Z
    121c:	b1 81       	ldd	r27, Z+1	; 0x01
    121e:	9d 01       	movw	r18, r26
    1220:	2f 5f       	subi	r18, 0xFF	; 255
    1222:	3f 4f       	sbci	r19, 0xFF	; 255
    1224:	31 83       	std	Z+1, r19	; 0x01
    1226:	20 83       	st	Z, r18
    1228:	8c 93       	st	X, r24
    122a:	26 81       	ldd	r18, Z+6	; 0x06
    122c:	37 81       	ldd	r19, Z+7	; 0x07
    122e:	2f 5f       	subi	r18, 0xFF	; 255
    1230:	3f 4f       	sbci	r19, 0xFF	; 255
    1232:	37 83       	std	Z+7, r19	; 0x07
    1234:	26 83       	std	Z+6, r18	; 0x06
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <fputc+0x6e>
    1238:	8b 01       	movw	r16, r22
    123a:	ec 01       	movw	r28, r24
    123c:	fb 01       	movw	r30, r22
    123e:	00 84       	ldd	r0, Z+8	; 0x08
    1240:	f1 85       	ldd	r31, Z+9	; 0x09
    1242:	e0 2d       	mov	r30, r0
    1244:	09 95       	icall
    1246:	89 2b       	or	r24, r25
    1248:	e1 f6       	brne	.-72     	; 0x1202 <fputc+0x10>
    124a:	d8 01       	movw	r26, r16
    124c:	16 96       	adiw	r26, 0x06	; 6
    124e:	8d 91       	ld	r24, X+
    1250:	9c 91       	ld	r25, X
    1252:	17 97       	sbiw	r26, 0x07	; 7
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	17 96       	adiw	r26, 0x07	; 7
    1258:	9c 93       	st	X, r25
    125a:	8e 93       	st	-X, r24
    125c:	16 97       	sbiw	r26, 0x06	; 6
    125e:	ce 01       	movw	r24, r28
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	08 95       	ret

0000126a <__ultoa_invert>:
    126a:	fa 01       	movw	r30, r20
    126c:	aa 27       	eor	r26, r26
    126e:	28 30       	cpi	r18, 0x08	; 8
    1270:	51 f1       	breq	.+84     	; 0x12c6 <__ultoa_invert+0x5c>
    1272:	20 31       	cpi	r18, 0x10	; 16
    1274:	81 f1       	breq	.+96     	; 0x12d6 <__ultoa_invert+0x6c>
    1276:	e8 94       	clt
    1278:	6f 93       	push	r22
    127a:	6e 7f       	andi	r22, 0xFE	; 254
    127c:	6e 5f       	subi	r22, 0xFE	; 254
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	8f 4f       	sbci	r24, 0xFF	; 255
    1282:	9f 4f       	sbci	r25, 0xFF	; 255
    1284:	af 4f       	sbci	r26, 0xFF	; 255
    1286:	b1 e0       	ldi	r27, 0x01	; 1
    1288:	3e d0       	rcall	.+124    	; 0x1306 <__ultoa_invert+0x9c>
    128a:	b4 e0       	ldi	r27, 0x04	; 4
    128c:	3c d0       	rcall	.+120    	; 0x1306 <__ultoa_invert+0x9c>
    128e:	67 0f       	add	r22, r23
    1290:	78 1f       	adc	r23, r24
    1292:	89 1f       	adc	r24, r25
    1294:	9a 1f       	adc	r25, r26
    1296:	a1 1d       	adc	r26, r1
    1298:	68 0f       	add	r22, r24
    129a:	79 1f       	adc	r23, r25
    129c:	8a 1f       	adc	r24, r26
    129e:	91 1d       	adc	r25, r1
    12a0:	a1 1d       	adc	r26, r1
    12a2:	6a 0f       	add	r22, r26
    12a4:	71 1d       	adc	r23, r1
    12a6:	81 1d       	adc	r24, r1
    12a8:	91 1d       	adc	r25, r1
    12aa:	a1 1d       	adc	r26, r1
    12ac:	20 d0       	rcall	.+64     	; 0x12ee <__ultoa_invert+0x84>
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <__ultoa_invert+0x48>
    12b0:	68 94       	set
    12b2:	3f 91       	pop	r19
    12b4:	2a e0       	ldi	r18, 0x0A	; 10
    12b6:	26 9f       	mul	r18, r22
    12b8:	11 24       	eor	r1, r1
    12ba:	30 19       	sub	r19, r0
    12bc:	30 5d       	subi	r19, 0xD0	; 208
    12be:	31 93       	st	Z+, r19
    12c0:	de f6       	brtc	.-74     	; 0x1278 <__ultoa_invert+0xe>
    12c2:	cf 01       	movw	r24, r30
    12c4:	08 95       	ret
    12c6:	46 2f       	mov	r20, r22
    12c8:	47 70       	andi	r20, 0x07	; 7
    12ca:	40 5d       	subi	r20, 0xD0	; 208
    12cc:	41 93       	st	Z+, r20
    12ce:	b3 e0       	ldi	r27, 0x03	; 3
    12d0:	0f d0       	rcall	.+30     	; 0x12f0 <__ultoa_invert+0x86>
    12d2:	c9 f7       	brne	.-14     	; 0x12c6 <__ultoa_invert+0x5c>
    12d4:	f6 cf       	rjmp	.-20     	; 0x12c2 <__ultoa_invert+0x58>
    12d6:	46 2f       	mov	r20, r22
    12d8:	4f 70       	andi	r20, 0x0F	; 15
    12da:	40 5d       	subi	r20, 0xD0	; 208
    12dc:	4a 33       	cpi	r20, 0x3A	; 58
    12de:	18 f0       	brcs	.+6      	; 0x12e6 <__ultoa_invert+0x7c>
    12e0:	49 5d       	subi	r20, 0xD9	; 217
    12e2:	31 fd       	sbrc	r19, 1
    12e4:	40 52       	subi	r20, 0x20	; 32
    12e6:	41 93       	st	Z+, r20
    12e8:	02 d0       	rcall	.+4      	; 0x12ee <__ultoa_invert+0x84>
    12ea:	a9 f7       	brne	.-22     	; 0x12d6 <__ultoa_invert+0x6c>
    12ec:	ea cf       	rjmp	.-44     	; 0x12c2 <__ultoa_invert+0x58>
    12ee:	b4 e0       	ldi	r27, 0x04	; 4
    12f0:	a6 95       	lsr	r26
    12f2:	97 95       	ror	r25
    12f4:	87 95       	ror	r24
    12f6:	77 95       	ror	r23
    12f8:	67 95       	ror	r22
    12fa:	ba 95       	dec	r27
    12fc:	c9 f7       	brne	.-14     	; 0x12f0 <__ultoa_invert+0x86>
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	61 05       	cpc	r22, r1
    1302:	71 05       	cpc	r23, r1
    1304:	08 95       	ret
    1306:	9b 01       	movw	r18, r22
    1308:	ac 01       	movw	r20, r24
    130a:	0a 2e       	mov	r0, r26
    130c:	06 94       	lsr	r0
    130e:	57 95       	ror	r21
    1310:	47 95       	ror	r20
    1312:	37 95       	ror	r19
    1314:	27 95       	ror	r18
    1316:	ba 95       	dec	r27
    1318:	c9 f7       	brne	.-14     	; 0x130c <__ultoa_invert+0xa2>
    131a:	62 0f       	add	r22, r18
    131c:	73 1f       	adc	r23, r19
    131e:	84 1f       	adc	r24, r20
    1320:	95 1f       	adc	r25, r21
    1322:	a0 1d       	adc	r26, r0
    1324:	08 95       	ret

00001326 <__prologue_saves__>:
    1326:	2f 92       	push	r2
    1328:	3f 92       	push	r3
    132a:	4f 92       	push	r4
    132c:	5f 92       	push	r5
    132e:	6f 92       	push	r6
    1330:	7f 92       	push	r7
    1332:	8f 92       	push	r8
    1334:	9f 92       	push	r9
    1336:	af 92       	push	r10
    1338:	bf 92       	push	r11
    133a:	cf 92       	push	r12
    133c:	df 92       	push	r13
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	ca 1b       	sub	r28, r26
    1350:	db 0b       	sbc	r29, r27
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	09 94       	ijmp

0000135e <__epilogue_restores__>:
    135e:	2a 88       	ldd	r2, Y+18	; 0x12
    1360:	39 88       	ldd	r3, Y+17	; 0x11
    1362:	48 88       	ldd	r4, Y+16	; 0x10
    1364:	5f 84       	ldd	r5, Y+15	; 0x0f
    1366:	6e 84       	ldd	r6, Y+14	; 0x0e
    1368:	7d 84       	ldd	r7, Y+13	; 0x0d
    136a:	8c 84       	ldd	r8, Y+12	; 0x0c
    136c:	9b 84       	ldd	r9, Y+11	; 0x0b
    136e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1370:	b9 84       	ldd	r11, Y+9	; 0x09
    1372:	c8 84       	ldd	r12, Y+8	; 0x08
    1374:	df 80       	ldd	r13, Y+7	; 0x07
    1376:	ee 80       	ldd	r14, Y+6	; 0x06
    1378:	fd 80       	ldd	r15, Y+5	; 0x05
    137a:	0c 81       	ldd	r16, Y+4	; 0x04
    137c:	1b 81       	ldd	r17, Y+3	; 0x03
    137e:	aa 81       	ldd	r26, Y+2	; 0x02
    1380:	b9 81       	ldd	r27, Y+1	; 0x01
    1382:	ce 0f       	add	r28, r30
    1384:	d1 1d       	adc	r29, r1
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	ed 01       	movw	r28, r26
    1392:	08 95       	ret

00001394 <_exit>:
    1394:	f8 94       	cli

00001396 <__stop_program>:
    1396:	ff cf       	rjmp	.-2      	; 0x1396 <__stop_program>
